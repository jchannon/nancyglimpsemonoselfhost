<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Glimpse.Core</name>
    </assembly>
    <members>
        <member name="T:Glimpse.Core.ClientScript.Client">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IDynamicClientScript"/> implementation responsible for adding the Glimpse JavaScript client <c>&lt;script&gt;</c> tag to a page response.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IDynamicClientScript">
            <summary>
            <c>IDynamicClientScript</c>'s are a special type of <see cref="T:Glimpse.Core.Extensibility.IClientScript"/> that sets the <c>&lt;script&gt;</c> tag's <c>src</c> attribute to the dynamically generated Uri for the <see cref="T:Glimpse.Core.Extensibility.IResource"/> of a given name.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IClientScript">
            <summary>
            <c>IClientScript</c> injects <c>&lt;script&gt;</c> tags into page responses.
            </summary>
            <remarks>
            There are three sub-types of <c>IClientScript</c>: 
             <list type="number">
              <item>
               <term><see cref="T:Glimpse.Core.Extensibility.IStaticClientScript"/></term>
               <description><c>IStaticClientScript</c>'s create <c>&lt;script&gt;</c> tag's with a <c>src</c> attribute pointing to a specific Uri.</description>
              </item>
              <item>
               <term><see cref="T:Glimpse.Core.Extensibility.IDynamicClientScript"/></term>
               <description><c>IDynamicClientScript</c>'s create <c>&lt;script&gt;</c> tag's with a <c>src</c> attribute pointing to the Uri of a specific type of <see cref="T:Glimpse.Core.Extensibility.IResource"/>.</description>
              </item>
             </list>
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IClientScript.Order">
            <summary>
            Gets the sorting order in which a <c>&lt;script&gt;</c> tag will be injected a page response, relative to other implementations of <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>.
            </summary>
            <value>Any value from the <see cref="T:Glimpse.Core.Extensibility.ScriptOrder"/> enumeration.</value>
            <remarks>
            Multiple <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>'s with the same <see cref="T:Glimpse.Core.Extensibility.ScriptOrder"/> will be sorted in an indeterminate order.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IDynamicClientScript.GetResourceName">
            <summary>
            Gets the name of the <see cref="T:Glimpse.Core.Extensibility.IResource"/> to dynamically generate a Uri for. 
            </summary>
            <remarks>
            <see cref="T:Glimpse.Core.Extensibility.IResource"/> Uri generation is handled by implementations of <see cref="T:Glimpse.Core.Framework.ResourceEndpointConfiguration"/>.
            </remarks>
            <returns>Name of the <see cref="T:Glimpse.Core.Extensibility.IResource"/> to link to.</returns>
        </member>
        <member name="M:Glimpse.Core.ClientScript.Client.GetResourceName">
            <summary>
            Gets the name of the <see cref="T:Glimpse.Core.Extensibility.IResource"/> to dynamically generate a Uri for.
            </summary>
            <returns>
            Name of the <see cref="T:Glimpse.Core.Extensibility.IResource"/> to link to.
            </returns>
            <remarks>
              <see cref="T:Glimpse.Core.Extensibility.IResource"/> Uri generation is handled by implementations of <see cref="T:Glimpse.Core.Framework.ResourceEndpointConfiguration"/>.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.ClientScript.Client.Order">
            <summary>
            Gets the sorting order in which a <c>&lt;script&gt;</c> tag will be injected a page response, relative to other implementations of <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>.
            </summary>
            <value>
            Any value from the <see cref="T:Glimpse.Core.Extensibility.ScriptOrder"/> enumeration.
            </value>
            <remarks>
            Multiple <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>'s with the same <see cref="T:Glimpse.Core.Extensibility.ScriptOrder"/> will be sorted in an indeterminate order.
            </remarks>
        </member>
        <member name="T:Glimpse.Core.ClientScript.Data">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IDynamicClientScript"/> implementation responsible for adding the Http request metadata <c>&lt;script&gt;</c> tag to a page response.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IParameterValueProvider">
            <summary>
            <c>IParameterValueProvider</c> provides a mechanism to override or append Uri template parameter values when generating an <see cref="T:Glimpse.Core.Extensibility.IDynamicClientScript"/>'s corresponding <see cref="T:Glimpse.Core.Extensibility.IResource"/> Uri.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IParameterValueProvider.OverrideParameterValues(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Used to override or append Uri template parameter values to the values required for the <see cref="T:Glimpse.Core.Extensibility.IDynamicClientScript"/>.
            </summary>
            <param name="defaults">The default Uri template parameter values as defined by the Glimpse server.</param>
        </member>
        <member name="M:Glimpse.Core.ClientScript.Data.GetResourceName">
            <summary>
            Gets the name of the <see cref="T:Glimpse.Core.Extensibility.IResource"/> to dynamically generate a Uri for.
            </summary>
            <returns>
            Name of the <see cref="T:Glimpse.Core.Extensibility.IResource"/> to link to.
            </returns>
            <remarks>
              <see cref="T:Glimpse.Core.Extensibility.IResource"/> Uri generation is handled by implementations of <see cref="T:Glimpse.Core.Framework.ResourceEndpointConfiguration"/>.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.ClientScript.Data.OverrideParameterValues(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Used to override or append Uri template parameter values to the values required for the <see cref="T:Glimpse.Core.Extensibility.IDynamicClientScript"/>.
            </summary>
            <param name="defaults">The default Uri template parameter values as defined by the Glimpse server.</param>
        </member>
        <member name="P:Glimpse.Core.ClientScript.Data.Order">
            <summary>
            Gets the sorting order in which a <c>&lt;script&gt;</c> tag will be injected a page response, relative to other implementations of <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>.
            </summary>
            <value>
            Any value from the <see cref="T:Glimpse.Core.Extensibility.ScriptOrder"/> enumeration.
            </value>
            <remarks>
            Multiple <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>'s with the same <see cref="T:Glimpse.Core.Extensibility.ScriptOrder"/> will be sorted in an indeterminate order.
            </remarks>
        </member>
        <member name="T:Glimpse.Core.ClientScript.Metadata">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IDynamicClientScript"/> implementation responsible for adding the Glimpse server configuration metadata <c>&lt;script&gt;</c> tag to a page response.
            </summary>
        </member>
        <member name="M:Glimpse.Core.ClientScript.Metadata.GetResourceName">
            <summary>
            Gets the name of the <see cref="T:Glimpse.Core.Extensibility.IResource"/> to dynamically generate a Uri for.
            </summary>
            <returns>
            Name of the <see cref="T:Glimpse.Core.Extensibility.IResource"/> to link to.
            </returns>
            <remarks>
              <see cref="T:Glimpse.Core.Extensibility.IResource"/> Uri generation is handled by implementations of <see cref="T:Glimpse.Core.Framework.ResourceEndpointConfiguration"/>.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.ClientScript.Metadata.OverrideParameterValues(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Used to override or append Uri template parameter values to the values required for the <see cref="T:Glimpse.Core.Extensibility.IDynamicClientScript"/>.
            </summary>
            <param name="defaults">The default Uri template parameter values as defined by the Glimpse server.</param>
        </member>
        <member name="P:Glimpse.Core.ClientScript.Metadata.Order">
            <summary>
            Gets the sorting order in which a <c>&lt;script&gt;</c> tag will be injected a page response, relative to other implementations of <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>.
            </summary>
            <value>
            Any value from the <see cref="T:Glimpse.Core.Extensibility.ScriptOrder"/> enumeration.
            </value>
            <remarks>
            Multiple <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>'s with the same <see cref="T:Glimpse.Core.Extensibility.ScriptOrder"/> will be sorted in an indeterminate order.
            </remarks>
        </member>
        <member name="T:Glimpse.Core.Configuration.CustomConfigurationElement">
            <summary>
            Represents a custom configuration element
            </summary>
        </member>
        <member name="P:Glimpse.Core.Configuration.CustomConfigurationElement.Key">
            <summary>
            The custom configuration key
            </summary>
        </member>
        <member name="P:Glimpse.Core.Configuration.CustomConfigurationElement.Type">
            <summary>
            The <see cref="P:Glimpse.Core.Configuration.CustomConfigurationElement.Type"/> for which the custom configuration applies
            </summary>
        </member>
        <member name="P:Glimpse.Core.Configuration.CustomConfigurationElement.ConfigurationContent">
            <summary>
            The actual custom configuration content
            </summary>
        </member>
        <member name="T:Glimpse.Core.Configuration.DiscoverableCollectionElement">
            <summary>
            The Glimpse configuration node that configures the instance of <see cref="T:Glimpse.Core.Framework.IDiscoverableCollection`1"/> that Glimpse uses to automatically find and load types at runtime.
            </summary>
            <remarks>
            <c>DiscoverableCollectionElement</c> is used to configure many types, including: <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>, <see cref="T:Glimpse.Core.Extensibility.IInspector"/>, <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/>, <see cref="T:Glimpse.Core.Extensibility.ITab"/> and <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/>'s
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Configuration.DiscoverableCollectionElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Configuration.DiscoverableCollectionElement"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Configuration.DiscoverableCollectionElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Custom deserializes the xml element by turning it into a collection of <see cref="T:Glimpse.Core.Configuration.CustomConfigurationElement"/>
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/></param>
            <param name="serializeCollectionKey">The serialize collection key</param>
        </member>
        <member name="M:Glimpse.Core.Configuration.DiscoverableCollectionElement.GetCustomConfiguration(System.String)">
            <summary>
            Gets the custom configuration for the given configuration key
            </summary>
            <param name="configurationKey">The configuration key</param>
            <returns>The corresponding custom configuration or <code>null</code> if none has been found</returns>
        </member>
        <member name="M:Glimpse.Core.Configuration.DiscoverableCollectionElement.GetCustomConfiguration(System.String,System.Type)">
            <summary>
            Gets the custom configuration for the given configuration key and type
            </summary>
            <param name="configurationKey">The configuration key</param>
            <param name="configurationFor">The type for which the configuration should apply</param>
            <returns>The corresponding custom configuration or <code>null</code> if none has been found</returns>
        </member>
        <member name="P:Glimpse.Core.Configuration.DiscoverableCollectionElement.AutoDiscover">
            <summary>
            Gets or sets a value indicating whether Glimpse should automatically discover types at runtime.
            </summary>
            <value>
            <c>true</c> to automatically discover (default); otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Glimpse.Core.Configuration.DiscoverableCollectionElement.DiscoveryLocation">
            <summary>
            Gets or sets the file path to the automatic discovery location or a particular Glimpse type. This property overrides the globally configured <c>DiscoveryLocation</c> in <see cref="T:Glimpse.Core.Configuration.Section"/>.
            </summary>
            <value>
            The absolute or relative file path to the automatic discovery location. 
            Relative paths are rooted from <c>AppDomain.CurrentDomain.BaseDirectory</c>, or the equivalent shadow copy directory when appropriate.
            </value>
        </member>
        <member name="P:Glimpse.Core.Configuration.DiscoverableCollectionElement.IgnoredTypes">
            <summary>
            Gets the list of types for Glimpse to ignore when they are automatically discovered.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Configuration.Section">
            <summary>
            The root Glimpse configuration node, that provides Glimpse configuration options in a site's <c>web.config</c>.
            </summary>
            <remarks>
            Before using, the <c>Section</c> class must be added to the <c>configSections</c> section of <c>web.config</c>, as shown in the examples. However, usually a NuGet package will make the necessary <c>web.config</c> changes automatically.
            <example>
            <code>
            <![CDATA[
            <configuration>
                <configSections>
                    <section name="glimpse" type="Glimpse.Core.Configuration.Section, Glimpse.Core" />
                    <!-- Additional section registrations -->
                </configSections>
                <!-- Additional configuration nodes -->
            </configuration>
            ]]>
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.Logging">
            <summary>
            Gets or sets the logging settings used by Glimpse.
            </summary>
            <remarks>
            Glimpse logging is mostly used to diagnose problems with Glimpse itself. Logging is off by default.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <logging level="Trace" />
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.ClientScripts">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>s that are injected into a page response by Glimpse.
            </summary>
            <remarks>
            By default, client scripts are discovered at runtime but that behavior, plus the location of where they are found, and which ones should be ignored is configurable.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <clientScripts autoDiscover="true" discoveryLocation="bin\debug">
                    <ignoredTypes>
                        <add type="{Namespace.Type, AssemblyName}"/>
                    </ignoredTypes>
                </clientScripts>
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.Inspectors">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IInspector"/>s that used to gather information about a site during Http requests.
            </summary>
            <remarks>
            By default, inspectors are discovered at runtime but that behavior, plus the location of where they are found, and which ones should be ignored is configurable.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <inspectors autoDiscover="true" discoveryLocation="bin\debug">
                    <ignoredTypes>
                        <add type="{Namespace.Type, AssemblyName}"/>
                    </ignoredTypes>
                </inspectors>
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.Resources">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IResource"/>s that provide endpoints to access server side data.
            </summary>
            <remarks>
            By default, resources are discovered at runtime but that behavior, plus the location of where they are found, and which ones should be ignored is configurable.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <resources autoDiscover="true" discoveryLocation="bin\debug">
                    <ignoredTypes>
                        <add type="{Namespace.Type, AssemblyName}"/>
                    </ignoredTypes>
                </resources>
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.Tabs">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.ITab"/>s that Glimpse will render in the client.
            </summary>
            <remarks>
            By default, tabs are discovered at runtime but that behavior, plus the location of where they are found, and which ones should be ignored is configurable.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <tabs autoDiscover="true" discoveryLocation="bin\debug">
                    <ignoredTypes>
                        <add type="{Namespace.Type, AssemblyName}"/>
                    </ignoredTypes>
                </tabs>
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.Metadata">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IMetadata"/>s that Glimpse will use to build the metadata.
            </summary>
            <remarks>
            By default, tabs are discovered at runtime but that behavior, plus the location of where they are found, and which ones should be ignored is configurable.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <tabs autoDiscover="true" discoveryLocation="bin\debug">
                    <ignoredTypes>
                        <add type="{Namespace.Type, AssemblyName}"/>
                    </ignoredTypes>
                </tabs>
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.TabMetadata">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.ITabMetadata"/>s that Glimpse will use in the tab metadata.
            </summary>
            <remarks>
            By default, tabs are discovered at runtime but that behavior, plus the location of where they are found, and which ones should be ignored is configurable.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <tabMetadata autoDiscover="true" discoveryLocation="bin\debug">
                    <ignoredTypes>
                        <add type="{Namespace.Type, AssemblyName}"/>
                    </ignoredTypes>
                </tabMetadata>
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.InstanceMetadata">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IInstanceMetadata"/>s that Glimpse will use in the instance metadata.
            </summary>
            <remarks>
            By default, instance metadata is discovered at runtime but that behavior, plus the location of where they 
            are found, and which ones should be ignored is configurable.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <instanceMetadata autoDiscover="true" discoveryLocation="bin\debug">
                    <ignoredTypes>
                        <add type="{Namespace.Type, AssemblyName}"/>
                    </ignoredTypes>
                </instanceMetadata>
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.RuntimePolicies">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/>s that Glimpse will use to determine how it can manipulate any given Http response.
            </summary>
            <remarks>
            By default, runtime policies are discovered at runtime but that behavior, plus the location of where they are found, and which ones should be ignored is configurable.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <runtimePolicies autoDiscover="true" discoveryLocation="bin\debug">
                    <ignoredTypes>
                        <add type="{Namespace.Type, AssemblyName}"/>
                    </ignoredTypes>
                </runtimePolicies>
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.SerializationConverters">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/>s that Glimpse will use alter the default serialization output of any given type.
            </summary>
            <remarks>
            By default, serialization converters are discovered at runtime but that behavior, plus the location of where they are found, and which ones should be ignored is configurable.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <serializationConverters autoDiscover="true" discoveryLocation="bin\debug">
                    <ignoredTypes>
                        <add type="{Namespace.Type, AssemblyName}"/>
                    </ignoredTypes>
                </serializationConverters>
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.DefaultRuntimePolicy">
            <summary>
            Gets or sets the default runtime policy. Glimpse will never be allowed to do more with a Http response than is specified in <c>DefaultRuntimePolicy</c>.
            </summary>
            <remarks>
            By default, the default runtime policy of Glimpse is <c>Off</c>. Setting the base policy to <c>On</c> will allow Glimpse to fully function.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.ServiceLocatorType">
            <summary>
            Gets or sets an <see cref="T:Glimpse.Core.Framework.IServiceLocator"/> Glimpse will use to override default type resolution.
            </summary>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd" serviceLocatorType="{Namespace.Type, AssemblyName}">
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.EndpointBaseUri">
            <summary>
            Gets or sets the base Uri endpoint for accessing all resources. The <c>EndpointBaseUri</c> is leveraged by an instance of <see cref="T:Glimpse.Core.Framework.ResourceEndpointConfiguration"/> in order to generate dynamic resource Uris.
            </summary>
            <remarks>
            The <c>EndpointBaseUri</c> is required.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.Section.DiscoveryLocation">
            <summary>
            Gets or sets the path Glimpse will use to auto discover all types.
            </summary>
            <remarks>
            The <c>DiscoveryLocation</c> defaults to <c>AppDomain.CurrentDomain.BaseDirectory</c>. Discovery locations for each type can be overwritten at the type level in <c>web.config</c>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd" discoveryLocation="bin\debug">
                <!-- Additional Glimpse configuration nodes -->
            </glimpse>
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Glimpse.Core.Configuration.LoggingElement">
            <summary>
            The Glimpse configuration node for logging settings in Glimpse.
            </summary>
            <remarks>
            Glimpse logging is mostly used to diagnose problems with Glimpse itself. Logging is off by default, but can be configured to output log statements at various levels.
            </remarks>
            <example>
            <code>
            <![CDATA[
            <logging level="Trace" />
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Glimpse.Core.Configuration.LoggingElement.Level">
            <summary>
            Gets or sets the logging level used by Glimpse.
            </summary>
            <value>
            The string representation of any valid <see cref="T:Glimpse.Core.Configuration.LoggingLevel"/>.
            </value>
        </member>
        <member name="P:Glimpse.Core.Configuration.LoggingElement.LogLocation">
            <summary>
            Gets or sets the file path to the Glimpse log file.
            </summary>
            <remarks>
            <c>LogLocation</c> is only written to if <c>Level</c> is not set to <c>Off</c>.
            </remarks>
            <value>
            The absolute or relative file path to the log file. 
            Relative paths are rooted from <c>AppDomain.CurrentDomain.BaseDirectory</c>.
            The default value is <c>Glimpse.log</c>.
            </value>
        </member>
        <member name="T:Glimpse.Core.Configuration.LoggingLevel">
            <summary>
            <c>LoggingLevel</c> defines the level of output detail to be written to the Glimpse log.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Configuration.LoggingLevel.Trace">
            <summary>
            The <c>Trace</c> level is the most detailed level of output in Glimpse.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Configuration.LoggingLevel.Debug">
            <summary>
            The <c>Debug</c> level contains debugging information, and is less detailed than trace.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Configuration.LoggingLevel.Info">
            <summary>
            The <c>Info</c> level contains common information messages.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Configuration.LoggingLevel.Warn">
            <summary>
            The <c>Warn</c> level contains warning messages, typically for non-critical issues, which can be recovered or which are temporary failures.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Configuration.LoggingLevel.Error">
            <summary>
            The <c>Error</c> level contains error messages that Glimpse was able to recover from.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Configuration.LoggingLevel.Fatal">
            <summary>
            The <c>Fatal</c> level contains error messages that Glimpse was unable to recover from.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Configuration.LoggingLevel.Off">
            <summary>
            The <c>Off</c> level contains no messages. When the logging level is <c>Off</c>, Glimpse will not even create a log file.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Configuration.TypeConverter">
            <summary>
            <c>TypeConverter</c> is a <see cref="T:System.Configuration.ConfigurationConverterBase"/> used to convert between <see cref="T:System.String"/> and <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Configuration.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given <see cref="T:System.String"/> to a <see cref="T:System.Type"/>, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Type"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentException">Throws an exception if <paramref name="value"/> is <c>null</c>, empty, or not a <see cref="T:System.String"/>.</exception>
        </member>
        <member name="M:Glimpse.Core.Configuration.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given <see cref="T:System.Type"/> to a <see cref="T:System.String"/>, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.String"/> that represents the converted value.
            </returns>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ITabSetup">
            <summary>
            Definition which allows a tab to inject any hooks it needs within the system.
            </summary>
            <remarks>
            If this interface isn't implemented on a <see cref="T:Glimpse.Core.Extensibility.ITab"/> no documentation 
            will be provided.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ITabSetup.Setup(Glimpse.Core.Extensibility.ITabSetupContext)">
            <summary>
            Setups the targeted tab using the specified context.
            </summary>
            <param name="context">The context which should be used.</param>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IKey">
            <summary>
            <c>IKey</c> provides implementers a means to override the automatically generated key for an object.
            </summary>
            <remarks>
            <para>
            <c>IKey</c> is used by <see cref="T:Glimpse.Core.Extensibility.ITab"/> and <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementations that need consistent and predictable
            key names for client side interaction.
            </para>
            <para>
            All keys, rather dynamically generated or specified with <see cref="T:Glimpse.Core.Extensibility.IKey"/> have spaces (<c>' '</c>) and periods (<c>'.'</c>) removed, 
            and are converted to lower case for consistency and simplification of JavaScript access.
            </para>
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IKey.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key. Only valid JavaScript identifiers should be used for future compatibility.</value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.AlternateType`1">
            <summary>
            An abstract <see cref="T:Glimpse.Core.Extensibility.IAlternateType`1"/> implementation that handles the most common <c>TryCreate</c> scenarios.
            </summary>
            <typeparam name="T">The type to retrieve and alternate for.</typeparam>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IAlternateType`1">
            <summary>
            Definition for an alternate that should replace a given Type
            </summary>
            <typeparam name="T">The type to retrieve and alternate for.</typeparam>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IAlternateType`1.TryCreate(`0,`0@)">
            <summary>
            Tries to create an alternate for the given target.
            </summary>
            <param name="originalObj">The original object.</param>
            <param name="newObj">The new object.</param>
            <returns><c>true</c> if the create was successful, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateType`1.#ctor(Glimpse.Core.Extensibility.IProxyFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.AlternateType`1"/> class.
            </summary>
            <param name="proxyFactory">The proxy factory.</param>
            <exception cref="T:System.ArgumentNullException">Throws and exception if <paramref name="proxyFactory"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateType`1.TryCreate(`0,`0@)">
            <summary>
            Tries to create an alternate type.
            </summary>
            <param name="originalObj">The original object.</param>
            <param name="newObj">The new object.</param>
            <returns>A proxied implementation of the <paramref name="originalObj"/>.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateType`1.TryCreate(`0,`0@,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Tries to create an alternate type with mixins.
            </summary>
            <param name="originalObj">The original object.</param>
            <param name="newObj">The new object.</param>
            <param name="mixins">The mixins.</param>
            <returns>
            A proxied implementation of the <paramref name="originalObj" />.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateType`1.TryCreate(`0,`0@,System.Collections.Generic.IEnumerable{System.Object},System.Object[])">
            <summary>
            Tries to create an alternate type with mixins and constructor arguments.
            </summary>
            <param name="originalObj">The original object.</param>
            <param name="newObj">The new object.</param>
            <param name="mixins">The mixins.</param>
            <param name="constructorArguments">The constructor arguments.</param>
            <returns>
            A proxied implementation of the <paramref name="originalObj" />.
            </returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateType`1.ProxyFactory">
            <summary>
            Gets or sets the proxy factory.
            </summary>
            <value>
            The proxy factory.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateType`1.AllMethods">
            <summary>
            Gets all methods for the proxy to override.
            </summary>
            <value>
            All methods.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.AlternateTypeGenerationHook`1">
            <summary>
            An implementation of Castle DynamicProxy's <see cref="T:Castle.DynamicProxy.IProxyGenerationHook"/> for Glimpse.
            </summary>
            <typeparam name="T">The type being proxied.</typeparam>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateTypeGenerationHook`1.#ctor(System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},Glimpse.Core.Extensibility.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.AlternateTypeGenerationHook`1"/> class.
            </summary>
            <param name="methodImplementations">The method implementations.</param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if either <paramref name="methodImplementations"/> or <paramref name="logger"/> are <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateTypeGenerationHook`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateTypeGenerationHook`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateTypeGenerationHook`1.MethodsInspected">
            <summary>
            Invoked by the generation process to notify that the whole process has completed.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateTypeGenerationHook`1.NonProxyableMemberNotification(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Invoked by the generation process to notify that a member was not marked as virtual.
            </summary>
            <param name="type">The type which declares the non-virtual member.</param>
            <param name="memberInfo">The non-virtual member.</param>
            <remarks>
            This method gives an opportunity to inspect any member which is not proxyable of a type that has
            been requested to be proxied, and if appropriate - throw an exception to notify the caller.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateTypeGenerationHook`1.ShouldInterceptMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Invoked by the generation process to determine if the specified method should be proxied.
            </summary>
            <param name="type">The type which declares the given method.</param>
            <param name="methodInfo">The method to inspect.</param>
            <returns>
            True if the given method should be proxied; false otherwise.
            </returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateTypeGenerationHook`1.MethodImplementations">
            <summary>
            Gets or sets the method implementations.
            </summary>
            <value>
            The method implementations.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateTypeGenerationHook`1.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.AlternateTypeSelector">
            <summary>
            An implementation of Castle DynamicProxy's <see cref="T:Castle.DynamicProxy.IInterceptorSelector"/> for Glimpse.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateTypeSelector.SelectInterceptors(System.Type,System.Reflection.MethodInfo,Castle.DynamicProxy.IInterceptor[])">
            <summary>
            Selects the interceptors that should intercept calls to the given <paramref name="method" />.
            </summary>
            <param name="type">The type declaring the method to intercept.</param>
            <param name="method">The method that will be intercepted.</param>
            <param name="interceptors">All interceptors registered with the proxy.</param>
            <returns>
            An array of interceptors to invoke upon calling the <paramref name="method" />.
            </returns>
            <remarks>
            This method is called only once per proxy instance, upon the first call to the
            <paramref name="method" />. Either an empty array or null are valid return values to indicate
            that no interceptor should intercept calls to the method. Although it is not advised, it is
            legal to return other <see cref="T:Castle.DynamicProxy.IInterceptor" /> implementations than these provided in
            <paramref name="interceptors" />.
            </remarks>
        </member>
        <member name="T:Glimpse.Core.Extensibility.AlternateMethod">
            <summary>
            An abstract <see cref="T:Glimpse.Core.Extensibility.IAlternateMethod"/> implementation which handles checking Glimpse policies and timing original implementations.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IAlternateMethod">
            <summary>
            Definition for an alternate method which allows classes to be proxied.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IAlternateMethod.NewImplementation(Glimpse.Core.Extensibility.IAlternateMethodContext)">
            <summary>
            New implementation that is called in-place of the the original method.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            It is up to this method to call the underlying target method.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethod.MethodToImplement">
            <summary>
            Gets the method to implement.
            </summary>
            <value>The method to implement.</value>
            <remarks>
            The info of the method that this alternate is for. 
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateMethod.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.AlternateMethod"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateMethod.#ctor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.AlternateMethod"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">Name of the method.</param>
            <param name="bindingFlags">The binding flags.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.AlternateMethod"/> class.
            </summary>
            <param name="methodToImplement">The method to implement.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if <paramref name="methodToImplement"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateMethod.NewImplementation(Glimpse.Core.Extensibility.IAlternateMethodContext)">
            <summary>
            New implementation that is called in-place of the the original method.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            It is up to this method to call the underlying target method.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateMethod.PostImplementation(Glimpse.Core.Extensibility.IAlternateMethodContext,Glimpse.Core.Extensibility.TimerResult)">
            <summary>
            Additional code to be executed after the original implementation has been run.
            </summary>
            <param name="context">The context.</param>
            <param name="timerResult">The timer result.</param>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateMethod.MethodToImplement">
            <summary>
            Gets the method to implement.
            </summary>
            <value>
            The method to implement.
            </value>
            <remarks>
            The info of the method that this alternate is for.
            </remarks>
        </member>
        <member name="T:Glimpse.Core.Extensibility.AntiXssEncoder">
            <summary>
            The default <see cref="T:Glimpse.Core.Extensibility.IHtmlEncoder"/> implementation of Glimpse, which leverages Microsoft's Web Protection Library.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IHtmlEncoder">
            <summary>
            Definition for a html encoder.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IHtmlEncoder.HtmlAttributeEncode(System.String)">
            <summary>
            Encode a given value for use as an Html attribute.
            </summary>
            <param name="input">The input.</param>
            <returns>Encoded result.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AntiXssEncoder.HtmlAttributeEncode(System.String)">
            <summary>
            Encode a given value for use as in an Html attribute.
            </summary>
            <param name="input">The input.</param>
            <returns>
            Encoded result.
            </returns>
        </member>
        <member name="T:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter">
            <summary>
            An adapter between Castle DynamicProxy's <see cref="T:Castle.DynamicProxy.IInvocation"/> and Glimpse's <see cref="T:Glimpse.Core.Extensibility.IAlternateMethodContext"/>.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IAlternateMethodContext">
            <summary>
            Definition for the context used by <see cref="T:Glimpse.Core.Extensibility.IAlternateMethod"/>
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IContext">
            <summary>
            Definition for the base context that is used by various concepts 
            in the system. Typically uses in place of passing multiple arguments 
            to a method.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IContext.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IAlternateMethodContext.SetArgumentValue(System.Int32,System.Object)">
            <summary>
            Overrides the value of an argument at the given index with the new value provided.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IAlternateMethodContext.GetArgumentValue(System.Int32)">
            <summary>
            Gets the value of the argument at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>Value of the argument.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IAlternateMethodContext.GetConcreteMethod">
            <summary>
            Gets the concrete method.
            </summary>
            <returns>The method info of the method that is the proxy that is the alternative implementation.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IAlternateMethodContext.GetConcreteMethodInvocationTarget">
            <summary>
            Gets the concrete method invocation target.
            </summary>
            <returns>The method info of the method that is the target of the alternative implementation.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IAlternateMethodContext.Proceed">
            <summary>
            Proceeds the call to the next implementation in line, and ultimately to the target method.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.Proxy">
            <summary>
            Gets the proxy object on which the alternate implementation is invoked.
            </summary>
            <value>The proxy.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.InvocationTarget">
            <summary>
            Gets the object on which the invocation is performed. This is different from proxy object 
            because most of the time this will be the proxy target object.
            </summary>
            <value>The invocation target.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.TargetType">
            <summary>
            Gets the type of the target object for the intercepted method.
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.Arguments">
            <summary>
            Gets the arguments that <see cref="T:Glimpse.Core.Extensibility.IAlternateMethod"/> has been invoked with.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.GenericArguments">
            <summary>
            Gets the generic arguments.
            </summary>
            <value>The generic arguments.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.Method">
            <summary>
            Gets the method representing the method being invoked on the proxy.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.MethodInvocationTarget">
            <summary>
            Gets the method info on the target class.
            </summary>
            <value>The method invocation target.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.ReturnValue">
            <summary>
            Gets or sets the return value of the method.
            </summary>
            <value>The return value.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.MessageBroker">
            <summary>
            Gets the message broker.
            </summary>
            <value>The message broker.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.ProxyFactory">
            <summary>
            Gets the proxy factory.
            </summary>
            <value>The proxy factory.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.TimerStrategy">
            <summary>
            Gets the timer strategy.
            </summary>
            <value>The timer strategy.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IAlternateMethodContext.RuntimePolicyStrategy">
            <summary>
            Gets the runtime policy strategy.
            </summary>
            <value>The runtime policy strategy.</value>
        </member>
        <member name="M:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.#ctor(Castle.DynamicProxy.IInvocation,Glimpse.Core.Extensibility.ILogger,Glimpse.Core.Extensibility.IMessageBroker,Glimpse.Core.Extensibility.IProxyFactory,System.Func{Glimpse.Core.Extensibility.IExecutionTimer},System.Func{Glimpse.Core.Extensibility.RuntimePolicy})">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter"/> class.
            </summary>
            <param name="invocation">The invocation.</param>
            <param name="logger">The logger.</param>
            <param name="messageBroker">The message broker.</param>
            <param name="proxyFactory">The proxy factory.</param>
            <param name="timerStrategy">The timer strategy.</param>
            <param name="runtimePolicyStrategy">The runtime policy strategy.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if any parameter is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.SetArgumentValue(System.Int32,System.Object)">
            <summary>
            Overrides the value of an argument at the given index with the new value provided.
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.GetArgumentValue(System.Int32)">
            <summary>
            Gets the value of the argument at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>
            Value of the argument.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.GetConcreteMethod">
            <summary>
            Gets the concrete method.
            </summary>
            <returns>
            The method info of the method that is the proxy that is the alternative implementation.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.GetConcreteMethodInvocationTarget">
            <summary>
            Gets the concrete method invocation target.
            </summary>
            <returns>
            The method info of the method that is the target of the alternative implementation.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.Proceed">
            <summary>
            Proceeds the call to the next implementation in line, and ultimately to the target method.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.Invocation">
            <summary>
            Gets or sets the invocation.
            </summary>
            <value>
            The invocation.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.Proxy">
            <summary>
            Gets the proxy object on which the alternate implementation is invoked.
            </summary>
            <value>
            The proxy.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.InvocationTarget">
            <summary>
            Gets the object on which the invocation is performed. This is different from proxy object
            because most of the time this will be the proxy target object.
            </summary>
            <value>
            The invocation target.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.TargetType">
            <summary>
            Gets the type of the target object for the intercepted method.
            </summary>
            <value>
            The type of the target.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.Arguments">
            <summary>
            Gets the arguments that <see cref="T:Glimpse.Core.Extensibility.IAlternateMethod"/> has been invoked with.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.GenericArguments">
            <summary>
            Gets the generic arguments.
            </summary>
            <value>
            The generic arguments.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.Method">
            <summary>
            Gets the method representing the method being invoked on the proxy.
            </summary>
            <value>
            The method.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.MethodInvocationTarget">
            <summary>
            Gets the method info on the target class.
            </summary>
            <value>
            The method invocation target.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.ReturnValue">
            <summary>
            Gets or sets the return value of the method.
            </summary>
            <value>
            The return value.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.MessageBroker">
            <summary>
            Gets the message broker.
            </summary>
            <value>
            The message broker.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.ProxyFactory">
            <summary>
            Gets the proxy factory.
            </summary>
            <value>
            The proxy factory.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.TimerStrategy">
            <summary>
            Gets the timer strategy.
            </summary>
            <value>
            The timer strategy.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.CastleInvocationToAlternateMethodContextAdapter.RuntimePolicyStrategy">
            <summary>
            Gets the runtime policy strategy.
            </summary>
            <value>
            The runtime policy strategy.
            </value>
        </member>
        <member name="T:Glimpse.Core.Framework.IConfigurator">
            <summary>
            Represents a configurator
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.IConfigurator.ProcessCustomConfiguration(System.String)">
            <summary>
            Will be called when custom configuration is available for the given custom configuration key
            </summary>
            <param name="customConfiguration">The custom configuration</param>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfigurator.CustomConfigurationKey">
            <summary>
            Gets the name of the configuration element which the configurator wants to process
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IDependOnResources">
            <summary>
            When implemented, a resource can indicate whether or not it depends on a given resource
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IDependOnResources.DependsOn(System.String)">
            <summary>
            Determines whether or not the resource depends on the given resource
            </summary>
            <param name="resourceName">The internal name of the resource</param>
            <returns>Boolean indicating whether or not the resource depends on the given resource</returns>
        </member>
        <member name="T:Glimpse.Core.Extensibility.DictionaryDataStoreAdapter">
            <summary>
            An adapter between an <see cref="T:System.Collections.IDictionary"/> and <see cref="T:Glimpse.Core.Extensibility.IDataStore"/>.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IDataStore">
            <summary>
            Definition for a data store that can be implemented as a storage strategy.
            This could be used to store request data in memory, to disk or any other 
            source.
            </summary>
            <remarks>
            In the case of storing requests to disk, it would mean that the system
            would still work in a multi server environment (i.e. a web farm).
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IDataStore.Get(System.String)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value stored at given key.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IDataStore.Set(System.String,System.Object)">
            <summary>
            Sets the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IDataStore.Contains(System.String)">
            <summary>
            Determines whether the data store contains a definition for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if it contains the specified key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.DictionaryDataStoreAdapter.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.DictionaryDataStoreAdapter"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <exception cref="T:System.ArgumentException">Throws an exception if a generic dictionary does not have a value of type <see cref="T:System.Object"/> and a key of either <see cref="T:System.String"/> or <see cref="T:System.Object"/>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.DictionaryDataStoreAdapter.Get(System.String)">
            <summary>
            Gets the item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            The value stored at given key.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.DictionaryDataStoreAdapter.Set(System.String,System.Object)">
            <summary>
            Sets the item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.DictionaryDataStoreAdapter.Contains(System.String)">
            <summary>
            Determines whether the data store contains a definition for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
              <c>true</c> if it contains the specified key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.DictionaryDataStoreAdapter.Dictionary">
            <summary>
            Gets or sets the dictionary.
            </summary>
            <value>
            The dictionary.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ExecutionTimer">
            <summary>
            An implementation of <see cref="T:Glimpse.Core.Extensibility.IExecutionTimer"/>.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IExecutionTimer">
            <summary>
            Definition for an execution timer which will track how long given executions take.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IExecutionTimer.Point">
            <summary>
            Points this instance.
            </summary>
            <returns>A <see cref="T:Glimpse.Core.Extensibility.TimerResult"/> which represents a single point in time.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IExecutionTimer.Time``1(System.Func{``0})">
            <summary>
            Times the specified function. This will start and stop the timer either side 
            of the function that is executed.
            </summary>
            <typeparam name="T">Type of result that is expected</typeparam>
            <param name="function">The function that should be executed.</param>
            <returns>Timing info that is collected as a result of the execution.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IExecutionTimer.Time(System.Action)">
            <summary>
            Times the specified action. This will start and stop the timer either side 
            of the action that is executed.
            </summary>
            <param name="action">The action that should be executed.</param>
            <returns>Timing info that is collected as a result of the execution.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IExecutionTimer.Start">
            <summary>
            Starts the timer instance.
            </summary>
            <returns>TimeSpan that represents this timing instance.</returns>
            <remarks>
            If this method is used, it is up to the developer to manually stop the 
            timer by calling Stop().
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IExecutionTimer.Stop(System.TimeSpan)">
            <summary>
            Stops the timer instance.
            </summary>
            <param name="offset">The offset.</param>
            <returns>Timing info that is collected as a result of the execution.</returns>
            <remarks>
            Inconsistent results may be experienced if you do not call Start() before
            calling Stop().
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IExecutionTimer.RequestStart">
            <summary>
            Gets the request start date and time.
            </summary>
            <value>
            The request start.
            </value>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ExecutionTimer.#ctor(System.Diagnostics.Stopwatch)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.ExecutionTimer"/> class.
            </summary>
            <param name="stopwatch">The stopwatch.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ExecutionTimer.Point">
            <summary>
            Returns a special <see cref="T:Glimpse.Core.Extensibility.TimerResult"/> which represents a single point in time.
            </summary>
            <returns>
            A TimerResult of a single point in time.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ExecutionTimer.Time``1(System.Func{``0})">
            <summary>
            Times the specified function. This will start and stop the timer either side
            of the function that is executed.
            </summary>
            <typeparam name="T">Type of result that is expected</typeparam>
            <param name="function">The function that should be executed.</param>
            <returns>
            Timing info that is collected as a result of the execution.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ExecutionTimer.Time(System.Action)">
            <summary>
            Times the specified action. This will start and stop the timer either side
            of the action that is executed.
            </summary>
            <param name="action">The action that should be executed.</param>
            <returns>
            Timing info that is collected as a result of the execution.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ExecutionTimer.Start">
            <summary>
            Starts the timer instance.
            </summary>
            <returns>
            TimeSpan that represents this timing instance.
            </returns>
            <remarks>
            If this method is used, it is up to the developer to manually stop the
            timer by calling Stop().
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ExecutionTimer.Stop(System.TimeSpan)">
            <summary>
            Stops the timer instance.
            </summary>
            <param name="offset">The offset.</param>
            <returns>
            Timing info that is collected as a result of the execution.
            </returns>
            <remarks>
            Inconsistent results may be experienced if you do not call Start() before
            calling Stop().
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ExecutionTimer.RequestStart">
            <summary>
            Gets the request start date and time.
            </summary>
            <value>
            The request start.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ExecutionTimer.Stopwatch">
            <summary>
            Gets or sets the stopwatch.
            </summary>
            <value>
            The stopwatch.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IConfigurable">
            <summary>
            Represents a type that can be configured by a <see cref="T:Glimpse.Core.Framework.IConfigurator"/>
            </summary>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IConfigurable.Configurator">
            <summary>
            Gets the configurator
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IInstanceMetadata">
            <summary>
            Provides the ability for metadata to be sliced into the metadata
            response for a given instance of a request.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IInstanceMetadata.GetInstanceMetadata(Glimpse.Core.Framework.IReadonlyConfiguration,Glimpse.Core.Framework.IGlimpseRequestContext)">
            <summary>
            Gets the instance metadata for this strategy
            </summary>
            <param name="configuration">Current configuration that the system has.</param>
            <param name="requestContext">Context of the current request.</param>
            <returns>The metadata to be used for the given key</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IInstanceMetadata.Key">
            <summary>
            Gets the key that should be used in the serialized output
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IMetadata">
            <summary>
            Provides the ability for metadata to be sliced into the metadata
            response for a given tab.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IMetadata.GetMetadata(Glimpse.Core.Framework.IReadonlyConfiguration)">
            <summary>
            Gets the metadata for a given configuration
            </summary>
            <param name="configuration">The configuration.</param>
            <returns>The metadata to be used for the given key</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IMetadata.Key">
            <summary>
            Gets the key that should be used in the serialized output
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IPrivilegedResource">
            <summary>
            <para>
            <c>IPrivilegedResource</c> has the ability to directly access Glimpse internals in order to provide Glimpse clients with data and assets for rendering to the end user.
            </para>
            <para>
            When implemented, a resource will be discovered and added to the collection of resources. 
            </para>
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IResource">
            <summary>
            <para>
            <c>IResource</c> provides Glimpse clients with data and assets for rendering to the end user.
            </para>
            <para>
            When implemented, a resource will be discovered and added to the collection of resources. 
            </para>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IResource.Execute(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Executes the specified resource with the specific context.
            </summary>
            <param name="context">The context.</param>
            <returns><see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> that can be executed when the Http response is ready to be returned.</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IResource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
            <value>The name.</value>
            <remarks>Resource name's should be unique across a given web application. If multiple <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.</remarks>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IResource.Parameters">
            <summary>
            Gets the required or optional parameters that a resource needs as processing input.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IPrivilegedResource.Execute(Glimpse.Core.Extensibility.IResourceContext,Glimpse.Core.Framework.IReadonlyConfiguration,Glimpse.Core.Framework.IRequestResponseAdapter)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context</param>
            <param name="configuration">The configuration</param>
            <param name="requestResponseAdapter">The request response adapter</param>
            <remarks>
            Use of <see cref="T:Glimpse.Core.Extensibility.IPrivilegedResource"/> is reserved.
            </remarks>
            <returns>
            A <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/>.
            </returns>
        </member>
        <member name="T:Glimpse.Core.Policy.IUriPolicyConfigurator">
            <summary>
            Represents a uri policy configurator
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.IUriPolicyConfigurator.AddSupportedStatusCodes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the given uri patterns to the the list of uri patterns to ignore
            </summary>
            <param name="uriPatternsToIgnore">The uri patterns to ignore</param>
        </member>
        <member name="M:Glimpse.Core.Policy.IUriPolicyConfigurator.AddUriPatternToIgnore(System.String)">
            <summary>
            Adds the given uri pattern to the list of uri patterns that will be ignored
            </summary>
            <param name="uriPattern">The uri pattern</param>
        </member>
        <member name="M:Glimpse.Core.Policy.IUriPolicyConfigurator.RemoveUriPatternToIgnore(System.String)">
            <summary>
            Removes the given uri pattern from the list of uri patterns that will be ignored
            </summary>
            <param name="uriPattern">The uri pattern</param>
        </member>
        <member name="P:Glimpse.Core.Policy.IUriPolicyConfigurator.UriPatternsToIgnore">
            <summary>
            Gets the uri patterns that will be ignored
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.IUriPolicyConfigurator.ContainsUriPatternsToIgnore">
            <summary>
            Gets a boolean indicating whether there are uri patterns that will be ignored
            </summary>  
        </member>
        <member name="T:Glimpse.Core.Extensibility.ITabLayout">
            <summary>
            Definition for how the layout of a given object can be controlled. When
            implementing a layout, <see cref="T:Glimpse.Core.Tab.Assist.TabLayout"/>
            can be used to make creating the required objects easier.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ITabLayout.GetLayout">
            <summary>
            Gets the layout which controls the layout.
            </summary>
            <returns>Object that dictates the layout.</returns>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ITabMetadata">
            <summary>
            Provides the ability for metadata to be sliced into the metadata
            response for a given tab.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ITabMetadata.GetTabMetadata(Glimpse.Core.Extensibility.ITab)">
            <summary>
            Gets the metadata for a given tab
            </summary>
            <param name="tab">Tab that might have metadata generated for it.</param>
            <returns></returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ITabMetadata.Key">
            <summary>
            Gets the key that should be used in the serialized output
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IWrapper`1">
            <summary>
            <c>IWrapper&lt;T&gt;</c> provides a common way to leverage the <see href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</see>.
            </summary>
            <typeparam name="T">Type of target object.</typeparam>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IWrapper`1.GetWrappedObject">
            <summary>
            Gets the wrapped target object.
            </summary>
            <returns>The underlying target object.</returns>
        </member>
        <member name="T:Glimpse.Core.Extensibility.JsonNetConverterDictionaryKeysAreNotPropertyNames">
            <summary>
            A <see cref="T:Newtonsoft.Json.JsonConverter"/> that overrides the way Json.Net handles dictionaries.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.JsonNetConverterDictionaryKeysAreNotPropertyNames.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.JsonNetConverterDictionaryKeysAreNotPropertyNames.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.NotSupportedException">Throws an exception if called.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.JsonNetConverterDictionaryKeysAreNotPropertyNames.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="P:Glimpse.Core.Extensibility.JsonNetConverterDictionaryKeysAreNotPropertyNames.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
            <value>
            <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.InspectorContext">
            <summary>
            The context passed into the <c>Setup</c> method of <see cref="T:Glimpse.Core.Extensibility.IInspector"/>.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IInspectorContext">
            <summary>
            Definition of a context that is used by the <see cref="T:Glimpse.Core.Extensibility.IInspector"/>.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IInspectorContext.ProxyFactory">
            <summary>
            Gets the proxy factory.
            </summary>
            <value>The proxy factory.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IInspectorContext.TimerStrategy">
            <summary>
            Gets the timer strategy.
            </summary>
            <value>The timer strategy.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IInspectorContext.MessageBroker">
            <summary>
            Gets the message broker.
            </summary>
            <value>The message broker.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IInspectorContext.RuntimePolicyStrategy">
            <summary>
            Gets the runtime policy strategy.
            </summary>
            <value>The runtime policy strategy.</value>
        </member>
        <member name="M:Glimpse.Core.Extensibility.InspectorContext.#ctor(Glimpse.Core.Extensibility.ILogger,Glimpse.Core.Extensibility.IProxyFactory,Glimpse.Core.Extensibility.IMessageBroker,System.Func{Glimpse.Core.Extensibility.IExecutionTimer},System.Func{Glimpse.Core.Extensibility.RuntimePolicy})">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.InspectorContext"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="proxyFactory">The proxy factory.</param>
            <param name="messageBroker">The message broker.</param>
            <param name="timerStrategy">The timer strategy.</param>
            <param name="runtimePolicyStrategy">The runtime policy strategy.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if any parameter if <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Extensibility.InspectorContext.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.InspectorContext.ProxyFactory">
            <summary>
            Gets or sets the proxy factory.
            </summary>
            <value>
            The proxy factory.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.InspectorContext.TimerStrategy">
            <summary>
            Gets or sets the timer strategy.
            </summary>
            <value>
            The timer strategy.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.InspectorContext.MessageBroker">
            <summary>
            Gets or sets the message broker.
            </summary>
            <value>
            The message broker.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.InspectorContext.RuntimePolicyStrategy">
            <summary>
            Gets or sets the runtime policy strategy.
            </summary>
            <value>
            The runtime policy strategy.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.RequestHandlingMode">
            <summary>
            Used to describe how a given request is handled by Glimpse
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RequestHandlingMode.Unhandled">
            <summary>
            Glimpse is not handling this request. This can be because Glimpse was disabled to start with or a <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/> decided 
            during <see cref="M:Glimpse.Core.Framework.IGlimpseRuntime.BeginRequest(Glimpse.Core.Framework.IRequestResponseAdapter)"/> that Glimpse should not handle this request.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RequestHandlingMode.RegularRequest">
            <summary>
            Glimpse hooked itself onto the request and started collecting information. This does not mean that information will be stored in the end,
            as it is still possible for a <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/> to decide otherwise by the end of the request.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RequestHandlingMode.ResourceRequest">
            <summary>
            Glimpse handles this request completely, as the request is made for a specific Glimpse <see cref="T:Glimpse.Core.Extensibility.IResource"/>
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.RuntimePolicy">
            <summary>
            Used to describe what operations Glimpse is allowed to perform during a Http request/response.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimePolicy.Off">
            <summary>
            <c>Off</c> allows Glimpse to perform any operations on a Http request/response.
            </summary>
            <remarks>
            When a request's runtime policy is off, Glimpse will not modify any part of the response or capture any data.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimePolicy.ExecuteResourceOnly">
            <summary>
            <c>ExecuteResourceOnly</c> allows Glimpse to only respond to <see cref="T:Glimpse.Core.Extensibility.IResource"/> requests. This mode is effectively a special type of <c>Off</c>.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimePolicy.PersistResults">
            <summary>
            <c>PersistResults</c> allows Glimpse to write request metadata to current <see cref="T:Glimpse.Core.Framework.IPersistenceStore"/> instance.
            </summary>
            <remarks>
            The act of persisting request metadata does not alter an Http response in any way.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimePolicy.ModifyResponseHeaders">
            <summary>
            <c>ModifyResponseHeaders</c> allows Glimpse to write custom Http headers and set cookies on the Http response.
            </summary>
            <remarks>
            <c>ModifyResponseHeaders</c> also grants Glimpse the ability to <c>PersistResults</c>.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimePolicy.ModifyResponseBody">
            <summary>
            <c>ModifyResponseBody</c> allows Glimpse to write to the Http response body.
            </summary>
            <remarks>
            <c>ModifyResponseBody</c> also grants Glimpse the ability to <c>PersistResults</c> and <c>ModifyResponseHeaders</c>.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimePolicy.DisplayGlimpseClient">
            <summary>
            <c>DisplayGlimpseClient</c> allows Glimpse to write the Glimpse JavaScript client <c>&lt;script&gt;</c> tag to the Http response body.
            </summary>
            <remarks>
            <c>DisplayGlimpseClient</c> also grants Glimpse the ability to <c>PersistResults</c>, <c>ModifyResponseHeaders</c> and <c>ModifyResponseBody</c>.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimePolicy.On">
            <summary>
            <c>On</c> allows Glimpse to run all operations against an Http request/response.
            </summary>
            <remarks>
            <c>On</c> also grants Glimpse the ability to <c>PersistResults</c>, <c>ModifyResponseHeaders</c>, <c>ModifyResponseBody</c> and <c>DisplayGlimpseClient</c>.
            </remarks>
        </member>
        <member name="T:Glimpse.Core.Extensions.EnumExtensions">
            <summary>
            Extension methods to simplify common tasks completed with <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensions.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            Converts an <see cref="T:System.Enum"/> value to a string if it is annotated with a <see cref="T:System.ComponentModel.DescriptionAttribute"/>.
            </summary>
            <param name="enumeration">The enumeration.</param>
            <returns>
            The <see cref="T:System.ComponentModel.DescriptionAttribute"/> string of the corresponding <see cref="T:System.Enum"/> member, or an empty string if no <see cref="T:System.ComponentModel.DescriptionAttribute"/> is present.
            </returns>
        </member>
        <member name="T:Glimpse.Core.Framework.ActiveGlimpseRequestContextEventArgs">
            <summary>
            Contains event data for <see cref="T:Glimpse.Core.Framework.ActiveGlimpseRequestContexts"/> related events
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.ActiveGlimpseRequestContextEventArgs.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.ActiveGlimpseRequestContextEventArgs"/>
            </summary>
            <param name="glimpseRequestId">The Id assigned to the request by Glimpse.</param>
        </member>
        <member name="P:Glimpse.Core.Framework.ActiveGlimpseRequestContextEventArgs.GlimpseRequestId">
            <summary>
            Gets the Glimpse Id assigned to this request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.ActiveGlimpseRequestContextEventArgs.RaisedOn">
            <summary>
            Gets the moment when the event was raised
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.ActiveGlimpseRequestContexts">
            <summary>
            Tracks active <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> instances
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.ActiveGlimpseRequestContexts.#ctor(Glimpse.Core.Framework.ICurrentGlimpseRequestIdTracker)">
            <summary>
            Initializes the type <see cref="T:Glimpse.Core.Framework.ActiveGlimpseRequestContexts"/>
            <param name="currentGlimpseRequestIdTracker">The <see cref="T:Glimpse.Core.Framework.ICurrentGlimpseRequestIdTracker"/> to use</param>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.ActiveGlimpseRequestContexts.Add(Glimpse.Core.Framework.IGlimpseRequestContext)">
            <summary>
            Adds the given <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> to the list of active Glimpse request contexts
            </summary>
            <param name="glimpseRequestContext">The <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> to add</param>
            <returns>
            A <see cref="T:Glimpse.Core.Framework.GlimpseRequestContextHandle"/> that will make sure the given <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> is removed from
            the list of active Glimpse request contexts once it is disposed or finalized.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Framework.ActiveGlimpseRequestContexts.TryGet(System.Guid,Glimpse.Core.Framework.IGlimpseRequestContext@)">
            <summary>
            Tries to get the corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> from the list of active Glimpse request contexts.
            </summary>
            <param name="glimpseRequestId">The Glimpse Id for which the corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> must be returned</param>
            <param name="glimpseRequestContext">The corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/></param>
            <returns>Boolean indicating whether or not the corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> was found.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.ActiveGlimpseRequestContexts.Remove(System.Guid)">
            <summary>
            Removes the corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> from the list of active Glimpse request contexts.
            </summary>
            <param name="glimpseRequestId">The Glimpse Id for which the corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> must be removed</param>
        </member>
        <member name="E:Glimpse.Core.Framework.ActiveGlimpseRequestContexts.RequestContextAdded">
            <summary>
            Raised when a new <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> was added to the list of active Glimpse request contexts
            </summary>
        </member>
        <member name="E:Glimpse.Core.Framework.ActiveGlimpseRequestContexts.RequestContextRemoved">
            <summary>
            Raised when an active <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> was removed from the list of active Glimpse request contexts
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.ActiveGlimpseRequestContexts.Current">
            <summary>
            Gets the current <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> based on the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>. If the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> has no matching
            Glimpse request Id, then an <see cref="T:Glimpse.Core.Framework.UnavailableGlimpseRequestContext"/> will be returned instead. If the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> has a matching
            Glimpse request Id, but there is no corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> in the list of active Glimpse request contexts, then a
            <see cref="T:Glimpse.Core.Framework.GlimpseException"/> is thrown.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.AssemblyTypesResolver">
            <summary>
            Resolves type for requested assemblies and caches the results for later use
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.AssemblyTypesResolver.ResolveTypes(System.Reflection.Assembly,Glimpse.Core.Extensibility.ILogger)">
            <summary>
            Resolves the types for the given assembly
            </summary>
            <remarks>
            The resolver will first check its cache. If the types were previously resolved for the given assembly, then those are returned
            If nothing has been cached before, then the types are being resolved and added to the cache before being returned.
            </remarks>
            <param name="assembly">The assembly for which the types should be resolved</param>
            <param name="logger">The logger to use in case an exception should occur when resolving the types</param>
            <returns>List of types resolved for the given assembly</returns>
        </member>
        <member name="T:Glimpse.Core.Framework.CallContextCurrentGlimpseRequestIdTracker">
            <summary>
            Implementation of a <see cref="T:Glimpse.Core.Framework.ICurrentGlimpseRequestIdTracker"/> that tracks a given Glimpse request Id inside the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.ICurrentGlimpseRequestIdTracker">
            <summary>
            Represents a store that keeps track of the Glimpse request id while a request is being processed.
            The store needs to make sure the request id is still available when threads are being switched
            while the request is being handled.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.ICurrentGlimpseRequestIdTracker.StartTracking(System.Guid)">
            <summary>
            Tracks the Glimpse request id while the request is being handled
            </summary>
            <param name="glimpseRequestId">The Glimpse request id assigned to the request that is being handled.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.ICurrentGlimpseRequestIdTracker.TryGet(System.Guid@)">
            <summary>
            Tries to get the tracked Glimpse request id for the request that is currently being handled
            </summary>
            <param name="glimpseRequestId">The tracked Glimpse request id, or the default <see cref="T:System.Guid"/> in case it was not found</param>
            <returns>Boolean indicating whether a Glimpse request id was found or not.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.ICurrentGlimpseRequestIdTracker.StopTracking">
            <summary>
            Stops tracking the Glimpse request id of the request that finished being handled. 
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.CallContextCurrentGlimpseRequestIdTracker.StartTracking(System.Guid)">
            <summary>
            Tracks the Glimpse request id inside the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>
            </summary>
            <param name="glimpseRequestId">The Glimpse request id to track.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.CallContextCurrentGlimpseRequestIdTracker.TryGet(System.Guid@)">
            <summary>
            Tries to get the tracked Glimpse request id from the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/>
            </summary>
            <param name="glimpseRequestId">The tracked Glimpse request id, or the default <see cref="T:System.Guid"/> in case it was not found</param>
            <returns>Boolean indicating whether a Glimpse request id was found or not.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.CallContextCurrentGlimpseRequestIdTracker.StopTracking">
            <summary>
            Stops tracking the Glimpse request id inside the <see cref="T:System.Runtime.Remoting.Messaging.CallContext"/> 
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.GlimpseRuntimeNotAvailableException">
            <summary>
            Exception thrown when the GlimpseRuntime instance is being accessed prematurely.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntimeNotAvailableException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRuntimeNotAvailableException"/> class.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntimeNotAvailableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRuntimeNotAvailableException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntimeNotAvailableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRuntimeNotAvailableException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntimeNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRuntimeNotAvailableException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Glimpse.Core.Framework.GlimpseRuntime">
            <summary>
            The heart and soul of Glimpse. The runtime coordinate all input from a <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/>, persists collected runtime information and writes responses out to the <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/>.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.IGlimpseRuntime">
            <summary>
            Defines methods to implement the Glimpse runtime
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.IGlimpseRuntime.BeginRequest(Glimpse.Core.Framework.IRequestResponseAdapter)">
            <summary>
            Calling this method will allow Glimpse to decide to hook into the given request or not
            </summary>
            <param name="requestResponseAdapter">The <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/></param>
            <returns>A <see cref="T:Glimpse.Core.Framework.GlimpseRequestContextHandle"/> for the given request which also indicates how Glimpse is actually handling that request.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.IGlimpseRuntime.EndRequest(Glimpse.Core.Framework.GlimpseRequestContextHandle)">
            <summary>
            Calling this method indicates Glimpse to finalize processing the request referenced by the given <paramref name="glimpseRequestContextHandle"/>"/>
            </summary>
            <param name="glimpseRequestContextHandle">The Glimpse handle of the corresponding request</param>
        </member>
        <member name="M:Glimpse.Core.Framework.IGlimpseRuntime.ExecuteResource(Glimpse.Core.Framework.GlimpseRequestContextHandle,System.String,Glimpse.Core.Framework.ResourceParameters)">
            <summary>
            Executes the given resource.
            </summary>
            <param name="glimpseRequestContextHandle">The Glimpse handle of the corresponding request</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.IGlimpseRuntime.BeginSessionAccess(Glimpse.Core.Framework.GlimpseRequestContextHandle)">
            <summary>
            Begins the session access.
            </summary>
            <remarks>
            Called when ever the implementing framework registers a clients session start. Code that is 
            executed off this methods should have access to the session state store. Specifically, 
            with the ASP.NET provider, this is wired to the <c>PostAcquireRequestState</c> method.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.IGlimpseRuntime.EndSessionAccess(Glimpse.Core.Framework.GlimpseRequestContextHandle)">
            <summary>
            Ends the session access.
            </summary>
            <remarks>
            Called when ever the implementing framework registers a clients session end. Code that is 
            executed off this methods should still have access to the session state store. Specifically, 
            with the ASP.NET provider, this is wired to the <c>PostRequestHandlerExecute</c> method.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.IGlimpseRuntime.TryGetRequestContext(System.Guid,Glimpse.Core.Framework.IGlimpseRequestContext@)">
            <summary>
            Returns the corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> for the given <paramref name="glimpseRequestId"/>
            </summary>
            <param name="glimpseRequestId">The Glimpse request Id</param>
            <param name="glimpseRequestContext">The corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/></param>
            <returns>Boolean indicating whether the corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> was found.</returns>
        </member>
        <member name="P:Glimpse.Core.Framework.IGlimpseRuntime.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.IGlimpseRuntime.CurrentRequestContext">
            <summary>
            Returns the <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> corresponding to the current request.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Glimpse.Core.Framework.GlimpseRuntime"/> class.
            </summary>
            <exception cref="T:System.NullReferenceException">BeginRequest method not found</exception>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.#ctor(Glimpse.Core.Framework.IReadonlyConfiguration,Glimpse.Core.Framework.ActiveGlimpseRequestContexts,Glimpse.Core.Framework.RuntimePolicyDeterminator,Glimpse.Core.Framework.MetadataProvider,Glimpse.Core.Framework.TabProvider,Glimpse.Core.Framework.DisplayProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRuntime"/>
            </summary>
            <param name="configuration">The configuration</param>
            <param name="activeGlimpseRequestContexts">The store for active <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> instances</param>
            <param name="runtimePolicyDeterminator">The runtime policy determinator</param>
            <param name="metadataProvider">The metadata provider</param>
            <param name="tabProvider">The tab provider</param>
            <param name="displayProvider">The display provider</param>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.BeginRequest(Glimpse.Core.Framework.IRequestResponseAdapter)">
            <summary>
            Begins Glimpse's processing of a Http request.
            </summary>
            <exception cref="T:Glimpse.Core.Framework.GlimpseException">Throws an exception if <see cref="T:Glimpse.Core.Framework.GlimpseRuntime"/> is not yet initialized.</exception>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.EndRequest(Glimpse.Core.Framework.GlimpseRequestContextHandle)">
            <summary>
            Ends Glimpse's processing of the request referenced by the given <paramref name="glimpseRequestContextHandle"/>"/&gt;
            </summary>
            <param name="glimpseRequestContextHandle">The Glimpse handle of the corresponding request</param>
            <exception cref="T:Glimpse.Core.Framework.GlimpseException">Throws an exception if <c>BeginRequest</c> has not yet been called for the given request.</exception>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.BeginSessionAccess(Glimpse.Core.Framework.GlimpseRequestContextHandle)">
            <summary>
            Begins access to session data.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.EndSessionAccess(Glimpse.Core.Framework.GlimpseRequestContextHandle)">
            <summary>
            Ends access to session data.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.ExecuteResource(Glimpse.Core.Framework.GlimpseRequestContextHandle,System.String,Glimpse.Core.Framework.ResourceParameters)">
            <summary>
            Executes the given resource.
            </summary>
            <param name="glimpseRequestContextHandle">The Glimpse handle of the corresponding request</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if either parameter is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.TryGetRequestContext(System.Guid,Glimpse.Core.Framework.IGlimpseRequestContext@)">
            <summary>
            Returns the corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> for the given <paramref name="glimpseRequestId"/>
            </summary>
            <param name="glimpseRequestId">The Glimpse request Id</param>
            <param name="glimpseRequestContext">The corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/></param>
            <returns>Boolean indicating whether the corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> was found.</returns>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRuntime.Initializer">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Framework.GlimpseRuntime.GlimpseRuntimeInitializer"/> which will initialize the <see cref="T:Glimpse.Core.Framework.GlimpseRuntime"/> and set the <see cref="P:Glimpse.Core.Framework.GlimpseRuntime.Instance"/>
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRuntime.IsAvailable">
            <summary>
            Gets a value indicating whether the Glimpse runtime is available.
            </summary>
            <value>
            <c>true</c> if the Glimpse runtime is available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRuntime.Instance">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Framework.IGlimpseRuntime"/> instance set during the initialization of the Glimpse runtime
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRuntime.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>
            The configuration.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRuntime.CurrentRequestContext">
            <summary>
            Returns the <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> corresponding to the current request.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.GlimpseRuntime.GlimpseRuntimeInitializer">
            <summary>
            Initializer used by the <see cref="T:Glimpse.Core.Framework.GlimpseRuntime"/> to initialize the Glimpse runtime
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.GlimpseRuntimeInitializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRuntime.GlimpseRuntimeInitializer"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.GlimpseRuntimeInitializer.AddInitializationMessage(Glimpse.Core.Configuration.LoggingLevel,System.String,System.Exception)">
            <summary>
            Allows the Glimpse runtime host to add additional initialization messages that will be written to the 
            Glimpse log once the Glimpse logger is available.
            </summary>
            <param name="level">The <see cref="T:Glimpse.Core.Configuration.LoggingLevel"/> of the message</param>
            <param name="message">The message</param>
            <param name="exception">A possible exception related to the message</param>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRuntime.GlimpseRuntimeInitializer.Initialize(Glimpse.Core.Framework.IConfiguration)">
            <summary>
            Initializes the Glimpse runtime by finalizing the <paramref name="configuration"/> and creating a new
            <see cref="T:Glimpse.Core.Framework.GlimpseRuntime"/> that will be set as the <see cref="P:Glimpse.Core.Framework.GlimpseRuntime.Instance"/>
            </summary>
            <param name="configuration">The configuration used to initialize the Glimpse runtime</param>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.CurrentGlimpseRequestIdTracker">
            <summary>
            Gets the current requestId tracker.
            </summary>
            <value>The current requestId tracker.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.ClientScripts">
            <summary>
            Gets the client scripts.
            </summary>
            <value>The client scripts.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.HtmlEncoder">
            <summary>
            Gets the HTML encoder.
            </summary>
            <value>The HTML encoder.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.PersistenceStore">
            <summary>
            Gets the persistence store.
            </summary>
            <value>The persistence store.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.Inspectors">
            <summary>
            Gets the inspectors.
            </summary>
            <value>The inspectors.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.ResourceEndpoint">
            <summary>
            Gets the resource endpoint.
            </summary>
            <value>The resource endpoint.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.Resources">
            <summary>
            Gets the resources.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.Serializer">
            <summary>
            Gets the serializer.
            </summary>
            <value>The serializer.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.Tabs">
            <summary>
            Gets the tabs.
            </summary>
            <value>The tabs.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.Metadata">
            <summary>
            Gets the metadata extensions.
            </summary>
            <value>The metadata extensions.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.TabMetadata">
            <summary>
            Gets the tab metadata extensions.
            </summary>
            <value>The tab metadata extensions.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.InstanceMetadata">
            <summary>
            Gets the instance metadata extensions.
            </summary>
            <value>The tab metadata extensions.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.RuntimePolicies">
            <summary>
            Gets the runtime policies.
            </summary>
            <value>The runtime policies.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.DefaultResource">
            <summary>
            Gets the default resource.
            </summary>
            <value>The default resource.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.DefaultRuntimePolicy">
            <summary>
            Gets the default runtime policy.
            </summary>
            <value>The default runtime policy.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.ProxyFactory">
            <summary>
            Gets the proxy factory.
            </summary>
            <value>The proxy factory.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.MessageBroker">
            <summary>
            Gets the message broker.
            </summary>
            <value>The message broker.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.EndpointBaseUri">
            <summary>
            Gets the endpoint base URI.
            </summary>
            <value>The endpoint base URI.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.Hash">
            <summary>
            Gets the configuration hash.
            </summary>
            <value>The hash.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IReadonlyConfiguration.Version">
            <summary>
            Gets the version of Glimpse core.
            </summary>
            <value>The version.</value>
        </member>
        <member name="T:Glimpse.Core.Framework.KeyCreator">
            <summary>
            Creates keys depending on the input given
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.KeyCreator.Create(System.Object)">
            <summary>
            Creates a key based on the given <paramref name="obj"/>
            </summary>
            <param name="obj">The input to base a key on</param>
            <returns>The key</returns>
        </member>
        <member name="T:Glimpse.Core.Framework.IGlimpseRequestContext">
            <summary>
            Represents the context of a specific request, which is used as an access point to the request's <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/> handle
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.IGlimpseRequestContext.StartTiming">
            <summary>
            Starts timing the execution of the referenced request
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.IGlimpseRequestContext.StopTiming">
            <summary>
            Stops timing the execution of the referenced request
            </summary>
            <returns>The elapsed time since the start of the timing</returns>
        </member>
        <member name="P:Glimpse.Core.Framework.IGlimpseRequestContext.GlimpseRequestId">
            <summary>
            Gets the Glimpse Id assigned to the referenced request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.IGlimpseRequestContext.RequestResponseAdapter">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/> for the referenced request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.IGlimpseRequestContext.RequestStore">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Extensibility.IDataStore"/> for the referenced request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.IGlimpseRequestContext.CurrentRuntimePolicy">
            <summary>
            Gets or sets the active <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> for the referenced request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.IGlimpseRequestContext.RequestHandlingMode">
            <summary>
            Gets the <see cref="P:Glimpse.Core.Framework.IGlimpseRequestContext.RequestHandlingMode"/> for the referenced request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.IGlimpseRequestContext.CurrentExecutionTimer">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Extensibility.IExecutionTimer"/> for the referenced request
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.GlimpseRequestContext">
            <summary>
            Represents the context of a specific request, which is used as an access point to the request's <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/> handle
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRequestContext.#ctor(System.Guid,Glimpse.Core.Framework.IRequestResponseAdapter,Glimpse.Core.Extensibility.RuntimePolicy,Glimpse.Core.Framework.IResourceEndpointConfiguration,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRequestContext"/>
            </summary>
            <param name="glimpseRequestId">The Id assigned to the request by Glimpse.</param>
            <param name="requestResponseAdapter">The <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/> of this request.</param>
            <param name="initialRuntimePolicy">The initial <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> for this request.</param>
            <param name="resourceEndpointConfiguration">The <see cref="T:Glimpse.Core.Framework.IResourceEndpointConfiguration"/>.</param>
            <param name="endpointBaseUri">The endpoint base URI.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRequestContext.StartTiming">
            <summary>
            Starts timing the execution of the referenced request
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRequestContext.StopTiming">
            <summary>
            Stops timing the execution of the referenced request
            </summary>
            <returns>The elapsed time since the start of the timing</returns>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestContext.GlimpseRequestId">
            <summary>
            Gets the Glimpse Id assigned to this request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestContext.RequestResponseAdapter">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/> for the referenced request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestContext.RequestStore">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Extensibility.IDataStore"/> for this request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestContext.CurrentRuntimePolicy">
            <summary>
            Gets or sets the active <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> for the referenced request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestContext.RequestHandlingMode">
            <summary>
            Gets the <see cref="P:Glimpse.Core.Framework.GlimpseRequestContext.RequestHandlingMode"/> for the referenced request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestContext.CurrentExecutionTimer">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Extensibility.IExecutionTimer"/> for the referenced request
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.GlimpseScriptTagsGenerator">
            <summary>
            Generator of Glimpse script tags
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseScriptTagsGenerator.Generate(System.Guid,Glimpse.Core.Framework.IReadonlyConfiguration)">
            <summary>
            
            </summary>
            <param name="glimpseRequestId">The Glimpse request Id for the request for which script tags must be generated</param>
            <param name="configuration">A <see cref="T:Glimpse.Core.Framework.IConfiguration"/></param>
            <returns>The generated script tags</returns>
        </member>
        <member name="T:Glimpse.Core.Framework.IResourceEndpointConfiguration">
            <summary>
            Represents a Glimpse resource endpoint configuration
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.IResourceEndpointConfiguration.GenerateUriTemplate(Glimpse.Core.Extensibility.IResource,System.String,Glimpse.Core.Extensibility.ILogger)">
            <summary>
            Generates the URI template.
            </summary>
            <param name="resource">The resource.</param>
            <param name="baseUri">The base URI.</param>
            <param name="logger">The logger.</param>
            <returns>A Uri template a client can expand to invoke a resource.</returns>
            <exception cref="T:System.ArgumentNullException">Throws and exception if <paramref name="resource"/> or <paramref name="logger"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Framework.IResourceEndpointConfiguration.IsResourceRequest(System.Uri,System.String)">
            <summary>
            Checks whether the given <paramref name="requestUri"/> is a request for a Glimpse <see cref="T:Glimpse.Core.Extensibility.IResource"/> or not
            </summary>
            <param name="requestUri">The request URI to check</param>
            <param name="endpointBaseUri">The endpoint base URI to check against</param>
            <returns>Boolean indicating whether a Glimpse <see cref="T:Glimpse.Core.Extensibility.IResource"/> request is made or not</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.RuntimePolicyDeterminator.#ctor(Glimpse.Core.Framework.IReadonlyConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.RuntimePolicyDeterminator"/>
            </summary>
            <param name="configuration">The <see cref="T:Glimpse.Core.Framework.IReadonlyConfiguration"/> that should be used</param>
        </member>
        <member name="M:Glimpse.Core.Framework.RuntimePolicyDeterminator.DetermineRuntimePolicy(Glimpse.Core.Extensibility.RuntimeEvent,Glimpse.Core.Extensibility.RuntimePolicy,Glimpse.Core.Framework.IRequestResponseAdapter)">
            <summary>
            Determines the resulting <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> based on the available <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/>
            </summary>
            <param name="runtimeEvent">The <see cref="T:Glimpse.Core.Extensibility.RuntimeEvent"/></param>
            <param name="maximumAllowedPolicy">The <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> that start from, this is the highest possible <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> that can be returned</param>
            <param name="requestResponseAdapter">The <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/></param>
            <returns>The <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> that is currently in effect</returns>
        </member>
        <member name="T:Glimpse.Core.Framework.UnavailableGlimpseRequestContextHandle">
            <summary>
            Represents a handle in case there is no <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> available.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.GlimpseRequestContextHandle">
            <summary>
            This is a handle that contains the necessary information to track a corresponding <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> and which will 
            make sure the <see cref="T:Glimpse.Core.Framework.ActiveGlimpseRequestContexts"/> instance, who created this handle, will be notified when it is being disposed, 
            either explicitly or implicitly when the finalizer of this handle is run by the Garbage Collector.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRequestContextHandle.#ctor(System.Guid,Glimpse.Core.Extensibility.RequestHandlingMode,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRequestContextHandle"/>
            </summary>
            <param name="glimpseRequestId">The Id assigned to the request by Glimpse.</param>
            <param name="requestHandlingMode">Mode representing the way Glimpse is handling the request.</param>
            <param name="onDisposeCallback">The callback to be executed when this instance is being disposed.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRequestContextHandle.Finalize">
            <summary>
            Finalizes the instance
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRequestContextHandle.Dispose">
            <summary>
            Disposes the handle, which will make sure the <see cref="T:Glimpse.Core.Framework.ActiveGlimpseRequestContexts"/> instance, who created this handle, will be notified.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRequestContextHandle.Dispose(System.Boolean)">
            <summary>
            Disposes the handle, which will make sure the <see cref="T:Glimpse.Core.Framework.ActiveGlimpseRequestContexts"/> instance, who created this handle, will be notified.
            </summary>
            <param name="disposing">Boolean indicating whether this method is called from the public <see cref="M:Glimpse.Core.Framework.GlimpseRequestContextHandle.Dispose"/> method or from within the finalizer</param>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestContextHandle.GlimpseRequestId">
            <summary>
            Gets the Glimpse Id assigned to this request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestContextHandle.RequestHandlingMode">
            <summary>
            Gets the mode indicating how Glimpse is handling this request
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.UnavailableGlimpseRequestContextHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.UnavailableGlimpseRequestContextHandle"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.UnavailableGlimpseRequestContextHandle.Dispose(System.Boolean)">
            <summary>
            Disposes the handle, which in effect will do nothing as this handle is only used in case there is no <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> available
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.UnavailableGlimpseRequestContextHandle.Instance">
            <summary>
            Represents a <see cref="T:Glimpse.Core.Framework.GlimpseRequestContextHandle"/> in case there is no <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/> available.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.UnavailableGlimpseRequestContext">
            <summary>
            Represents an unavailable <see cref="T:Glimpse.Core.Framework.IGlimpseRequestContext"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.UnavailableGlimpseRequestContext.StartTiming">
            <summary>
            Starts timing the execution of the referenced request
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.UnavailableGlimpseRequestContext.StopTiming">
            <summary>
            Stops timing the execution of the referenced request
            </summary>
            <returns>The elapsed time since the start of the timing</returns>
        </member>
        <member name="P:Glimpse.Core.Framework.UnavailableGlimpseRequestContext.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:Glimpse.Core.Framework.UnavailableGlimpseRequestContext"/> type.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.UnavailableGlimpseRequestContext.GlimpseRequestId">
            <summary>
            Gets a default <see cref="T:System.Guid"/> representing the unavailable request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.UnavailableGlimpseRequestContext.RequestResponseAdapter">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/> of the unavailable request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.UnavailableGlimpseRequestContext.RequestStore">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Extensibility.IDataStore"/> for the unavailable request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.UnavailableGlimpseRequestContext.CurrentRuntimePolicy">
            <summary>
            Gets the active <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> for the unavailable request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.UnavailableGlimpseRequestContext.RequestHandlingMode">
            <summary>
            Gets the <see cref="P:Glimpse.Core.Framework.UnavailableGlimpseRequestContext.RequestHandlingMode"/> for the unavailable request
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.UnavailableGlimpseRequestContext.CurrentExecutionTimer">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Extensibility.IExecutionTimer"/> for the referenced request
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.Support.ExecutionBlockBase">
            <summary>
            Base class which encapsulates the logic to ensure that 
            a given block of code is only executed once.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.Support.ExecutionBlockBase.RegisterProvider(Glimpse.Core.Framework.Support.IExecutionTask)">
            <summary>
            Allows tasks to be added which will be executed when the Block
            is executed.
            </summary>
            <param name="task">Task to be executed</param>
        </member>
        <member name="M:Glimpse.Core.Framework.Support.ExecutionBlockBase.Execute">
            <summary>
            Execute any 
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.Support.IExecutionTask">
            <summary>
            Definition of an execution task.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.Support.IExecutionTask.Execute">
            <summary>
            Executes the specified logic.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.ResourceEndpointConfiguration">
            <summary>
            Defines methods to implement a resource endpoint configuration.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.ResourceEndpointConfiguration.GenerateUriTemplate(Glimpse.Core.Extensibility.IResource,System.String,Glimpse.Core.Extensibility.ILogger)">
            <summary>
            Generates the URI template.
            </summary>
            <param name="resource">The resource.</param>
            <param name="baseUri">The base URI.</param>
            <param name="logger">The logger.</param>
            <returns>A Uri template a client can expand to invoke a resource.</returns>
            <exception cref="T:System.ArgumentNullException">Throws and exception if <paramref name="resource"/> or <paramref name="logger"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Framework.ResourceEndpointConfiguration.IsResourceRequest(System.Uri,System.String)">
            <summary>
            Checks whether the given <paramref name="requestUri"/> is a request for a Glimpse <see cref="T:Glimpse.Core.Extensibility.IResource"/> or not
            </summary>
            <param name="requestUri">The request URI to check</param>
            <param name="endpointBaseUri">The endpoint base URI to check against</param>
            <returns>Boolean indicating whether a Glimpse <see cref="T:Glimpse.Core.Extensibility.IResource"/> request is made or not</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.ResourceEndpointConfiguration.GenerateUriTemplate(System.String,System.String,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.ResourceParameterMetadata},Glimpse.Core.Extensibility.ILogger)">
            <summary>
            Generates the URI template.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="baseUri">The base URI.</param>
            <param name="parameters">The parameters.</param>
            <param name="logger">The logger.</param>
            <returns>A Uri template a client can expand to invoke a resource.</returns>
        </member>
        <member name="T:Glimpse.Core.Guard">
            <summary>
            Guard class, used for guard clauses and argument validation
            </summary>
        </member>
        <member name="M:Glimpse.Core.Guard.ArgumentNotNull(System.String,System.Object)">
            <summary>
            Guards against null values
            </summary>
            <param name="argumentName">The name of the argument used when throwing a <see cref="T:System.ArgumentNullException"/></param>
            <param name="argumentValue">The argument to check against <code>null</code></param>
        </member>
        <member name="T:Glimpse.Core.Message.RuntimeMessage">
            <summary>
            The message used to to track the beginning and end of Http requests.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Message.MessageBase">
            <summary>
            Core message that can be used to build other messages.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Message.IMessage">
            <summary>
            The definition of a simple message, which contains unique Id.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Message.IMessage.Id">
            <summary>
            Gets the id.
            </summary>
            <value>
            The id.
            </value>
        </member>
        <member name="M:Glimpse.Core.Message.MessageBase.#ctor">
            <summary>
            Constructs message.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Message.MessageBase.#ctor(System.Guid)">
            <summary>
            Constructs message with a defined message id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:Glimpse.Core.Message.MessageBase.Id">
            <summary>
            Gets the id of the message.
            </summary>
            <value>The id.</value>
        </member>
        <member name="T:Glimpse.Core.Message.ITimelineMessage">
            <summary>
            Describes the message that the timeline will look for
            when recording events.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Message.ITimedMessage">
            <summary>
            The definition of a message which is published with execution timing information.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Message.ITimedMessage.Offset">
            <summary>
            Gets or sets the offset from the Http request start.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:Glimpse.Core.Message.ITimedMessage.Duration">
            <summary>
            Gets or sets the duration of the executed method.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="P:Glimpse.Core.Message.ITimedMessage.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="P:Glimpse.Core.Message.ITimelineMessage.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:Glimpse.Core.Message.ITimelineMessage.EventCategory">
            <summary>
            Gets or sets the event category.
            </summary>
            <value>The event category.</value>
        </member>
        <member name="P:Glimpse.Core.Message.ITimelineMessage.EventSubText">
            <summary>
            Gets or sets the event sub text.
            </summary>
            <value>The event sub text.</value>
        </member>
        <member name="T:Glimpse.Core.Message.ISourceMessage">
            <summary>
            The definition of a message which is published from a proxy implementation.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Message.ISourceMessage.ExecutedType">
            <summary>
            Gets or sets the type of the original executed object.
            </summary>
            <value>
            The type of the executed.
            </value>
        </member>
        <member name="P:Glimpse.Core.Message.ISourceMessage.ExecutedMethod">
            <summary>
            Gets or sets the original executed method.
            </summary>
            <value>
            The executed method.
            </value>
        </member>
        <member name="T:Glimpse.Core.PreBodyTagInjectionStream">
            <summary>
            This class will inject some html snippet (most likely the Glimpse Client script tags, but it can be anything) in the resulting HTML output.
            It will look for the last occurrence of the &lt;/body&gt; tag and inject the snippet right before that tag.
            An instance of this class should be assigned as a filter to the outgoing response so that the injection can be done once all the rendering is completed.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Policy.AddRemoveClearItemsConfigurator`1">
            <summary>
            Base class for <see cref="T:Glimpse.Core.Framework.IConfigurator"/> types that process custom configurations based on add/remove/clear nodes
            </summary>
            <typeparam name="TConfiguredItem">Type of the configured item</typeparam>
        </member>
        <member name="M:Glimpse.Core.Policy.AddRemoveClearItemsConfigurator`1.#ctor(System.String,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Policy.AddRemoveClearItemsConfigurator`1"/>
            </summary>
            <param name="customConfigurationKey">The custom configuration key</param>
            <param name="comparer">The comparer to use to check whether an item has already been added to the list of configured items</param>
        </member>
        <member name="M:Glimpse.Core.Policy.AddRemoveClearItemsConfigurator`1.ProcessCustomConfiguration(System.String)">
            <summary>
            Will be called when custom configuration is available for the given custom configuration key
            </summary>
            <param name="customConfiguration">The custom configuration</param>
        </member>
        <member name="M:Glimpse.Core.Policy.AddRemoveClearItemsConfigurator`1.CreateItem(System.Xml.XmlNode)">
            <summary>
            Creates an instance of <typeparamref name="TConfiguredItem"/> based on the given <paramref name="itemNode"/>
            </summary>
            <param name="itemNode">The <see cref="T:System.Xml.XmlNode"/> from which an instance of <typeparamref name="TConfiguredItem"/> must be created</param>
            <returns>An instance of <typeparamref name="TConfiguredItem"/></returns>
        </member>
        <member name="M:Glimpse.Core.Policy.AddRemoveClearItemsConfigurator`1.AddItem(`0)">
            <summary>
            Adds the given item to the collection if it does not yet exist
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Glimpse.Core.Policy.AddRemoveClearItemsConfigurator`1.RemoveItem(`0)">
            <summary>
            Removes the given configured item
            </summary>
            <param name="item">The item to remove</param>
        </member>
        <member name="M:Glimpse.Core.Policy.AddRemoveClearItemsConfigurator`1.ClearItems">
            <summary>
            Removes all the configured items
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.AddRemoveClearItemsConfigurator`1.CustomConfigurationKey">
            <summary>
            Gets the name of the configuration element which the configurator wants to process
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.AddRemoveClearItemsConfigurator`1.ConfiguredItems">
            <summary>
            Gets the configured items
            </summary>
        </member>
        <member name="T:Glimpse.Core.Policy.ContentTypePolicyConfigurator">
            <summary>
            Implementation of an <see cref="T:Glimpse.Core.Policy.IContentTypePolicyConfigurator"/>
            </summary>
        </member>
        <member name="T:Glimpse.Core.Policy.IContentTypePolicyConfigurator">
            <summary>
            Represents a content type policy configurator
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.IContentTypePolicyConfigurator.AddSupportedContentTypes(System.Collections.Generic.IEnumerable{Glimpse.Core.Policy.SupportedContentType})">
            <summary>
            Adds the given content types to the list of supported content types
            </summary>
            <param name="supportedContentTypes">The content types to support</param>
        </member>
        <member name="M:Glimpse.Core.Policy.IContentTypePolicyConfigurator.AddSupportedContentType(Glimpse.Core.Policy.SupportedContentType)">
            <summary>
            Adds the given content type to the list of supported content types
            </summary>
            <param name="supportedContentType">The content type to support</param>
        </member>
        <member name="M:Glimpse.Core.Policy.IContentTypePolicyConfigurator.RemoveSupportedContentType(System.String)">
            <summary>
            Removes the given content type from the list of supported content types
            </summary>
            <param name="contentType">The content type to remove</param>
        </member>
        <member name="P:Glimpse.Core.Policy.IContentTypePolicyConfigurator.SupportedContentTypes">
            <summary>
            Gets the supported content types
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.IContentTypePolicyConfigurator.ContainsSupportedContentTypes">
            <summary>
            Gets a boolean indicating whether there are supported content types
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.ContentTypePolicyConfigurator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Policy.ContentTypePolicyConfigurator"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.ContentTypePolicyConfigurator.AddSupportedContentTypes(System.Collections.Generic.IEnumerable{Glimpse.Core.Policy.SupportedContentType})">
            <summary>
            Adds the given content types to the list of supported content types
            </summary>
            <param name="supportedContentTypes">The content types to support</param>
        </member>
        <member name="M:Glimpse.Core.Policy.ContentTypePolicyConfigurator.AddSupportedContentType(Glimpse.Core.Policy.SupportedContentType)">
            <summary>
            Adds the given content type to the list of supported content types
            </summary>
            <param name="supportedContentType">The content type to support</param>
        </member>
        <member name="M:Glimpse.Core.Policy.ContentTypePolicyConfigurator.RemoveSupportedContentType(System.String)">
            <summary>
            Removes the given content type from the list of supported content types
            </summary>
            <param name="contentType">The content type to remove</param>
        </member>
        <member name="M:Glimpse.Core.Policy.ContentTypePolicyConfigurator.CreateItem(System.Xml.XmlNode)">
            <summary>
            Creates an string representing a content type
            </summary>
            <param name="itemNode">The <see cref="T:System.Xml.XmlNode"/> from which a content type is created</param>
            <returns>A content type</returns>
        </member>
        <member name="P:Glimpse.Core.Policy.ContentTypePolicyConfigurator.SupportedContentTypes">
            <summary>
            Gets the supported content types
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.ContentTypePolicyConfigurator.ContainsSupportedContentTypes">
            <summary>
            Gets a boolean indicating whether there are supported content types
            </summary>
        </member>
        <member name="T:Glimpse.Core.Policy.IStatusCodePolicyConfigurator">
            <summary>
            Represents a status code policy configurator
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.IStatusCodePolicyConfigurator.AddSupportedStatusCodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds the given status codes to the list of supported status codes
            </summary>
            <param name="statusCodes">The status codes</param>
        </member>
        <member name="M:Glimpse.Core.Policy.IStatusCodePolicyConfigurator.AddSupportedStatusCode(System.Int32)">
            <summary>
            Adds the given status code to the list of supported status codes
            </summary>
            <param name="statusCode">The status code</param>
        </member>
        <member name="M:Glimpse.Core.Policy.IStatusCodePolicyConfigurator.RemoveSupportedStatusCode(System.Int32)">
            <summary>
            Removes the given status code from the list of supported status codes
            </summary>
            <param name="statusCode">The status code to remove</param>
        </member>
        <member name="P:Glimpse.Core.Policy.IStatusCodePolicyConfigurator.SupportedStatusCodes">
            <summary>
            Gets the supported status codes
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.IStatusCodePolicyConfigurator.ContainsSupportedStatusCodes">
            <summary>
            Gets a boolean indicating whether there are supported status codes
            </summary>
        </member>
        <member name="T:Glimpse.Core.Policy.StatusCodePolicyConfigurator">
            <summary>
            Implementation of an <see cref="T:Glimpse.Core.Policy.IStatusCodePolicyConfigurator"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.StatusCodePolicyConfigurator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Policy.StatusCodePolicyConfigurator"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.StatusCodePolicyConfigurator.AddSupportedStatusCodes(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Adds the given status codes to the list of supported status codes
            </summary>
            <param name="statusCodes">The status codes</param>
        </member>
        <member name="M:Glimpse.Core.Policy.StatusCodePolicyConfigurator.AddSupportedStatusCode(System.Int32)">
            <summary>
            Adds the given status code to the list of supported status codes
            </summary>
            <param name="statusCode">The status code</param>
        </member>
        <member name="M:Glimpse.Core.Policy.StatusCodePolicyConfigurator.RemoveSupportedStatusCode(System.Int32)">
            <summary>
            Removes the given status code from the list of supported status codes
            </summary>
            <param name="statusCode">The status code to remove</param>
        </member>
        <member name="M:Glimpse.Core.Policy.StatusCodePolicyConfigurator.CreateItem(System.Xml.XmlNode)">
            <summary>
            Creates a integer representing a status code
            </summary>
            <param name="itemNode">The <see cref="T:System.Xml.XmlNode"/> from which a status code is created</param>
            <returns>A status code</returns>
        </member>
        <member name="P:Glimpse.Core.Policy.StatusCodePolicyConfigurator.SupportedStatusCodes">
            <summary>
            Gets the supported status codes
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.StatusCodePolicyConfigurator.ContainsSupportedStatusCodes">
            <summary>
            Gets a boolean indicating whether there are supported status codes
            </summary>
        </member>
        <member name="T:Glimpse.Core.Policy.SupportedContentType">
            <summary>
            Represents a supported content type
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.SupportedContentType.#ctor(System.String,Glimpse.Core.Extensibility.RuntimePolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Policy.SupportedContentType"/>
            </summary>
            <param name="contentType">The content type</param>
            <param name="runtimePolicyToApply">The <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> to apply on a match</param>
        </member>
        <member name="P:Glimpse.Core.Policy.SupportedContentType.ContentType">
            <summary>
            Gets the content type
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.SupportedContentType.RuntimePolicyToApply">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> to apply on a match
            </summary>
        </member>
        <member name="T:Glimpse.Core.Policy.UriPolicyConfigurator">
            <summary>
            Implementation of an <see cref="T:Glimpse.Core.Policy.IUriPolicyConfigurator"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.UriPolicyConfigurator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Policy.UriPolicyConfigurator"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.UriPolicyConfigurator.AddSupportedStatusCodes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the given uri patterns to the the list of uri patterns to ignore
            </summary>
            <param name="uriPatternsToIgnore">The uri patterns to ignore</param>
        </member>
        <member name="M:Glimpse.Core.Policy.UriPolicyConfigurator.AddUriPatternToIgnore(System.String)">
            <summary>
            Adds the given uri pattern to the list of uri patterns that will be ignored
            </summary>
            <param name="uriPattern">The uri pattern</param>
        </member>
        <member name="M:Glimpse.Core.Policy.UriPolicyConfigurator.RemoveUriPatternToIgnore(System.String)">
            <summary>
            Removes the given uri pattern from the list of uri patterns that will be ignored
            </summary>
            <param name="uriPattern">The uri pattern</param>
        </member>
        <member name="M:Glimpse.Core.Policy.UriPolicyConfigurator.CreateItem(System.Xml.XmlNode)">
            <summary>
            Creates a <see cref="T:System.Text.RegularExpressions.Regex"/> representing a uri pattern to ignore
            </summary>
            <param name="itemNode">The <see cref="T:System.Xml.XmlNode"/> from which a uri regex pattern is created</param>
            <returns>A uri regex pattern</returns>
        </member>
        <member name="P:Glimpse.Core.Policy.UriPolicyConfigurator.UriPatternsToIgnore">
            <summary>
            Gets the uri patterns that will be ignored
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.UriPolicyConfigurator.ContainsUriPatternsToIgnore">
            <summary>
            Gets a boolean indicating whether there are uri patterns that will be ignored
            </summary>
        </member>
        <member name="T:Glimpse.Core.Resource.ConfigurationScriptResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse Configuration Script
            </summary>
        </member>
        <member name="T:Glimpse.Core.Resource.FileResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> abstraction which makes returning static resources embedded into an assembly easier.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.FileResource.Execute(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Executes the specified resource with the specific context.
            </summary>
            <param name="context">The context.</param>
            <returns>
              <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> that can be executed when the Http response is ready to be returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throws an exception if <paramref name="context "/> is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Resource.FileResource.GetEmbeddedResourceInfo(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Returns, based on the resource context, the embedded resource that will be returned during the execution of the <see cref="T:Glimpse.Core.Resource.FileResource"/>
            </summary>
            <param name="context">The resource context</param>
            <returns>Information about the embedded resource</returns>
        </member>
        <member name="P:Glimpse.Core.Resource.FileResource.Name">
            <summary>
            Gets or sets the name of the resource.
            </summary>
            <value>
            The name.
            </value>
            <remarks>
            Resource name's should be unique across a given web application. If multiple <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Resource.FileResource.Parameters">
            <summary>
            Gets the required or optional parameters that a resource needs as processing input.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.FileResource.CacheDuration">
            <summary>
            Gets the duration of the cache, in seconds.
            </summary>
            <value>
            The duration of the cache, in seconds.
            </value>
            <remarks>
            CacheDuration will be set as the <c>max-age</c> parameter of the <c>Cache-Control</c> Http response header.
            </remarks>
        </member>
        <member name="T:Glimpse.Core.Resource.FileResource.EmbeddedResourceInfo">
            <summary>
            Contains the details of an embedded resource
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.FileResource.EmbeddedResourceInfo.#ctor(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Resource.FileResource.EmbeddedResourceInfo"/> class
            </summary>
            <param name="resourceAssembly">The assembly containing the embedded resource</param>
            <param name="resourceName">The name of the embedded resource</param>
            <param name="contentType">The content type of the embedded resource</param>
        </member>
        <member name="P:Glimpse.Core.Resource.FileResource.EmbeddedResourceInfo.Assembly">
            <summary>
            Gets the assembly containing the embedded resource.
            </summary>
            <value>
            The assembly containing the embedded resource.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.FileResource.EmbeddedResourceInfo.Name">
            <summary>
            Gets the name of the embedded resource.
            </summary>
            <value>
            The name of the embedded resource.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.FileResource.EmbeddedResourceInfo.ContentType">
            <summary>
            Gets the content type of the embedded resource.
            </summary>
            <value>
            The content type of the embedded resource.
            </value>
        </member>
        <member name="M:Glimpse.Core.Resource.ConfigurationScriptResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Resource.ConfigurationScriptResource"/> class.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.ConfigurationScriptResource.GetEmbeddedResourceInfo(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Returns the embedded resource that represents the Glimpse Configuration Script which will be returned during the execution of the <see cref="T:Glimpse.Core.Resource.FileResource"/>
            </summary>
            <param name="context">The resource context</param>
            <returns>Information about the embedded Glimpse Configuration Script</returns>
        </member>
        <member name="P:Glimpse.Core.Resource.ConfigurationScriptResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.ConfigurationStyleResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse Configuration Style
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.ConfigurationStyleResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Resource.ConfigurationStyleResource"/> class.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.ConfigurationStyleResource.GetEmbeddedResourceInfo(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Returns the embedded resource that represents the Glimpse Configuration Style which will be returned during the execution of the <see cref="T:Glimpse.Core.Resource.FileResource"/>
            </summary>
            <param name="context">The resource context</param>
            <returns>Information about the embedded Glimpse Configuration Style</returns>
        </member>
        <member name="P:Glimpse.Core.Resource.ConfigurationStyleResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.LogosResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing all logos used in Glimpse.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.LogosResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Resource.LogosResource"/> class.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.LogosResource.GetEmbeddedResourceInfo(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Returns, based on the resource context, the embedded resource that represents a logo and will be returned during the execution of the <see cref="T:Glimpse.Core.Resource.FileResource"/>
            </summary>
            <param name="context">The resource context</param>
            <returns>Information about the embedded resource that represents a logo</returns>
        </member>
        <member name="P:Glimpse.Core.Resource.LogosResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.LogosResource.Parameters">
            <summary>
            Gets the required or optional parameters that a resource needs as processing input.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.SerializationConverter`1">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> abstraction which makes creating converters that deal with one type easier.
            </summary>
            <typeparam name="T">
            The type supported to convert.
            </typeparam>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ISerializationConverter">
            <summary>
            <para>
            Definition for a converter that will provide a custom object 
            representation to serialize for the supported types.
            </para>
            <para>
            When implemented, a serialization converter will be discovered and added to the collection of serialization converters. 
            </para>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ISerializationConverter.Convert(System.Object)">
            <summary>
            Converts the specified object into a representation suitable for serialization.
            </summary>
            <param name="target">The object to be converted.</param>
            <returns>The new object representation.</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ISerializationConverter.SupportedTypes">
            <summary>
            Gets the supported types the converter will be invoked for.
            </summary>
            <value>The supported types.</value>
        </member>
        <member name="M:Glimpse.Core.Extensibility.SerializationConverter`1.Convert(System.Object)">
            <summary>
            Converts the specified object.
            </summary>
            <param name="obj">The object to transform.</param>
            <returns>The new object representation.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.SerializationConverter`1.Convert(`0)">
            <summary>
            Converts the specified object.
            </summary>
            <param name="obj">The object to transform.</param>
            <returns>The new object representation.</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.SerializationConverter`1.SupportedTypes">
            <summary>
            Gets the supported types the converter will be invoked for.
            </summary>
            <value>
            The supported types.
            </value>
        </member>
        <member name="T:Glimpse.Core.Setting.Initializer">
            <summary>
            Designed solely for plugin authors to add Initialize options 
            to via extension methods.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Support.NuGetPackageDiscoverer">
            <summary>
            Discoverer for assemblies defined as NuGet packages by means of the <see cref="T:Glimpse.Core.Extensibility.NuGetPackageAttribute"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Support.NuGetPackageDiscoverer.Discover">
            <summary>
            Discovers NuGet packages by checking all loaded assemblies for the presence of the <see cref="T:Glimpse.Core.Extensibility.NuGetPackageAttribute"/> attribute,
            while keeping track of assemblies that could not be processed during discovery, if any.
            </summary>
            <returns>The result of the discovery.</returns>
        </member>
        <member name="T:Glimpse.Core.Support.NuGetPackageDiscoveryResult">
            <summary>
            Represents the results of discovering NuGet packages based on the <see cref="T:Glimpse.Core.Extensibility.NuGetPackageAttribute"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Support.NuGetPackageDiscoveryResult.#ctor(Glimpse.Core.Extensibility.NuGetPackageAttribute[],System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Support.NuGetPackageDiscoveryResult"/> class.
            </summary>
            <param name="foundNuGetPackages">List of found NuGet packages</param>
            <param name="nonProcessableAssemblies">List of assemblies that could not be processed during discovery</param>
        </member>
        <member name="P:Glimpse.Core.Support.NuGetPackageDiscoveryResult.FoundNuGetPackages">
            <summary>
            Gets the list of found NuGet packages
            </summary>
        </member>
        <member name="P:Glimpse.Core.Support.NuGetPackageDiscoveryResult.NonProcessableAssemblies">
            <summary>
            Gets the list of assemblies that could not be processed during discovery
            </summary>
        </member>
        <member name="T:Glimpse.Core.Support.NuGetPackage">
            <summary>
            Helper methods designed to aid in the discovery of which
            Glimpse nuget packages are currently installed.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Support.NuGetPackage.GetRegisteredPackageVersions">
            <summary>
            Gets the registered package names and versions.
            </summary>
            <returns>Found entries.</returns>
        </member>
        <member name="M:Glimpse.Core.Support.NuGetPackage.GetRegisteredPackages">
            <summary>
            Gets the registered packages attribute registration.
            </summary>
            <returns>Found entries.</returns>
        </member>
        <member name="T:Glimpse.Settings">
            <summary>
            Hook that is used to hang any system settings 
            </summary>
        </member>
        <member name="F:Glimpse.Settings.Initialize">
            <summary>
            Hook that is used to hang initialization code from. No method 
            here is required to be called. You should only need to use this 
            code if Glimpse doesn't initialize soon enough in the application
            life cycle for your purposes.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Message.SourceMessageExtension">
            <summary>
            Extension methods for populating <see cref="T:Glimpse.Core.Message.ISourceMessage"/> instances.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Message.SourceMessageExtension.AsSourceMessage``1(``0,System.Type,System.Reflection.MethodInfo)">
            <summary>
            Populates relevant properties on the source message.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message.</param>
            <param name="executedType">Type of the executed.</param>
            <param name="executedMethod">The executed method.</param>
            <returns>The <paramref name="message"/> with populated <see cref="T:Glimpse.Core.Message.ISourceMessage"/> properties.</returns>
        </member>
        <member name="T:Glimpse.Core.Message.ITraceMessage">
            <summary>
            Message definition that captures trace events.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Message.ITraceMessage.Category">
            <summary>
            Gets or sets the category the message is in.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Glimpse.Core.Message.ITraceMessage.Message">
            <summary>
            Gets or sets the message content.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Glimpse.Core.Message.ITraceMessage.FromFirst">
            <summary>
            Gets or sets the time from the request start.
            </summary>
            <value>From first.</value>
        </member>
        <member name="P:Glimpse.Core.Message.ITraceMessage.FromLast">
            <summary>
            Gets or sets the time from the last trace event.
            </summary>
            <value>From last.</value>
        </member>
        <member name="P:Glimpse.Core.Message.ITraceMessage.IndentLevel">
            <summary>
            Gets or sets the indent level of the message.
            </summary>
            <value>The indent level.</value>
        </member>
        <member name="T:Glimpse.Core.Message.TimelineCategoryItem">
            <summary>
            Definition for a timeline category.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Message.TimelineCategoryItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs the timeline category item.
            </summary>
            <param name="name">Name that will be displayed in the UI.</param>
            <param name="color">The main bar color.</param>
            <param name="colorHighlight">The main bar border color.</param>
        </member>
        <member name="P:Glimpse.Core.Message.TimelineCategoryItem.Name">
            <summary>
            Gets or sets the name that will be displayed in the UI.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Glimpse.Core.Message.TimelineCategoryItem.Color">
            <summary>
            Gets or sets the main bar color.
            </summary>
            <value>The color.</value>
        </member>
        <member name="P:Glimpse.Core.Message.TimelineCategoryItem.ColorHighlight">
            <summary>
            Gets or sets the main bar border color.
            </summary>
            <value>The color highlight.</value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.NuGetPackageAttribute">
            <summary>
            An attribute used to identify the corresponding NuGet package and Id for an assembly.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NuGetPackageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.NuGetPackageAttribute"/> class.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NuGetPackageAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.NuGetPackageAttribute"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NuGetPackageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.NuGetPackageAttribute"/> class.
            </summary>
            <param name="id">The id.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NuGetPackageAttribute.Initialize(System.Reflection.Assembly)">
            <summary>
            Setup Attribute with Assembly context
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NuGetPackageAttribute.GetId">
            <summary>
            Gets the id.
            </summary>
            <returns>The NuGet package Id for the initialized assembly.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NuGetPackageAttribute.GetVersion">
            <summary>
            Gets the version.
            </summary> 
            <returns>The NuGet package version for the initialized assembly.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NuGetPackageAttribute.GetAssemblyName">
            <summary>
            Returns the full name of the assembly that the attribute is in.
            </summary>
            <returns>Full name value</returns>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ResourceParameterMetadata">
            <summary>
            <c>ResourceParameterMetadata</c> describes the parameters for an <see cref="T:Glimpse.Core.Extensibility.IResource"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ResourceParameterMetadata.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.ResourceParameterMetadata"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ResourceParameterMetadata.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <remarks>
            Names will typically become Html form fields or Uri query string parameter keys.
            </remarks>
            <value>
            The name. 
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ResourceParameterMetadata.IsRequired">
            <summary>
            Gets or sets a value indicating whether this parameter is required.
            </summary>
            <value>
            <c>true</c> if this instance is required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ResourceResultDecorator">
            <summary>
            An <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> abstraction for adding additional functionality to <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> via the common <see href="http://en.wikipedia.org/wiki/Decorator_pattern">decorator pattern</see>.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IResourceResult">
            <summary>
            <c>IResourceResult</c> provides Glimpse a <see href="http://en.wikipedia.org/wiki/Command_pattern">command object</see> for returning the results of an <see cref="T:Glimpse.Core.Extensibility.IResource"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IResourceResult.Execute(Glimpse.Core.Extensibility.IResourceResultContext)">
            <summary>
            Executes the resource result with the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ResourceResultDecorator.#ctor(Glimpse.Core.Extensibility.IResourceResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.ResourceResultDecorator"/> class.
            </summary>
            <param name="wrappedResourceResult">The wrapped resource result.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ResourceResultDecorator.GetWrappedObject">
            <summary>
            Gets the wrapped object.
            </summary>
            <returns>
            Returned the wrapped object.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ResourceResultDecorator.Execute(Glimpse.Core.Extensibility.IResourceResultContext)">
            <summary>
            Executes the resource result with the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ResourceResultDecorator.Decorate(Glimpse.Core.Extensibility.IResourceResultContext)">
            <summary>
            Decorates the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ResourceResultDecorator.WrappedResourceResult">
            <summary>
            Gets or sets the wrapped resource result.
            </summary>
            <value>
            The wrapped resource result.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.TimerResult">
            <summary>
            The result of a <c>Time</c> method call on a <see cref="T:Glimpse.Core.Extensibility.IExecutionTimer"/>.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TimerResult.Offset">
            <summary>
            Gets or sets the offset from the beginning of the Http request.
            </summary>
            <value>
            The offset.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TimerResult.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TimerResult.StartTime">
            <summary>
            Gets or sets the start time.
            </summary>
            <value>
            The start time.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IMessageBroker">
            <summary>
            Definition of the Message Broker that will used by the system.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IMessageBroker.Publish``1(``0)">
            <summary>
            Publishes the specified message using the type as the topic.
            </summary>
            <typeparam name="T">Type of the message</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IMessageBroker.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribes the specified action to the Type specified.
            </summary>
            <typeparam name="T">Type of the message</typeparam>
            <param name="action">The action.</param>
            <returns>A subscription Id, which should be retained in order to unsubscribe.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IMessageBroker.Unsubscribe``1(System.Guid)">
            <summary>
            Unsubscribes the listener from the specified subscription id.
            </summary>
            <typeparam name="T">Type of the message</typeparam>
            <param name="subscriptionId">The subscription id.</param>
        </member>
        <member name="T:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter">
            <summary>
            An adapter between Glimpse's <see cref="T:Glimpse.Core.Extensibility.IAlternateType`1"/> and Castle DynamicProxy's <see cref="T:Castle.DynamicProxy.IInterceptor"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter.#ctor(Glimpse.Core.Extensibility.IAlternateMethod,Glimpse.Core.Extensibility.ILogger,Glimpse.Core.Extensibility.IMessageBroker,Glimpse.Core.Extensibility.IProxyFactory,System.Func{Glimpse.Core.Extensibility.IExecutionTimer},System.Func{Glimpse.Core.Extensibility.RuntimePolicy})">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter"/> class.
            </summary>
            <param name="implementation">The implementation.</param>
            <param name="logger">The logger.</param>
            <param name="messageBroker">The message broker.</param>
            <param name="proxyFactory">The proxy factory.</param>
            <param name="timerStrategy">The timer strategy.</param>
            <param name="runtimePolicyStrategy">The runtime policy strategy.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if either <paramref name="implementation"/> or <paramref name="logger"/> are <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter.Intercept(Castle.DynamicProxy.IInvocation)">
            <summary>
            Intercepts the specified invocation.
            </summary>
            <param name="invocation">The invocation.</param>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter.Implementation">
            <summary>
            Gets or sets the implementation.
            </summary>
            <value>
            The implementation.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter.MessageBroker">
            <summary>
            Gets or sets the message broker.
            </summary>
            <value>
            The message broker.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter.ProxyFactory">
            <summary>
            Gets or sets the proxy factory.
            </summary>
            <value>
            The proxy factory.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter.RuntimePolicyStrategy">
            <summary>
            Gets or sets the runtime policy strategy.
            </summary>
            <value>
            The runtime policy strategy.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter.TimerStrategy">
            <summary>
            Gets or sets the timer strategy.
            </summary>
            <value>
            The timer strategy.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.AlternateTypeToCastleInterceptorAdapter.MethodToImplement">
            <summary>
            Gets the method to implement.
            </summary>
            <value>
            The method to implement.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IProxyFactory">
            <summary>
            <para>
            Definition of a factory that can create proxies of given objects/types. Factory 
            supports wrapping a interfaces, wrapping a class or extending a class. 
            </para>
            <para>
            Wrapping takes a target instance, generates a new type that extends the input 
            types and injects the target object within the new instance. Extends takes a 
            type and generates a new type that extends it.
            </para>
            </summary>
            <remarks>
            <para>
            When selecting a class to wrap or extend, it is important to know what constructors
            you have and whether a default constructor is available.
            </para>
            <para>
            When a method is called on a wrapped target, it is important to note that once the 
            targets version of that method is called, no other method on the proxy will be called.
            This can become important if you are try to wrap multiple methods where one calls the 
            other.
            </para>
            <para>
            When a method is called on a extended class, it is important to note that the new 
            class will behave differently to that of a wrapped classes. Meaning that if you have 
            multiple methods that you are providing alternates for, if one calls the other, the 
            alternate will be called on both methods.
            </para>
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.IsWrapInterfaceEligible``1(System.Type)">
            <summary>
            Determines whether the specified type is wrap interface eligible. 
            </summary>
            <typeparam name="TToWrap">The type of the T to wrap.</typeparam>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is wrap interface eligible] [the specified type]; otherwise, <c>false</c>.</returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.WrapInterface``1(``0,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod})">
            <summary>
            Wraps the interface. 
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodImplementations">The method implementations.</param>
            <returns>Wrapped instance.</returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.WrapInterface``1(``0,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Wraps the interface.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodImplementations">The method implementations.</param>
            <param name="mixins">The mixins.</param>
            <returns>Wrapped instance.</returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.IsWrapClassEligible(System.Type)">
            <summary>
            Determines whether the specified type is wrap class eligible.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is wrap class eligible] [the specified type]; otherwise, <c>false</c>.</returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.WrapClass``1(``0,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod})">
            <summary>
            Wraps the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodImplementations">The method implementations.</param>
            <returns>Wrapped instance.</returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.WrapClass``1(``0,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Wraps the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodImplementations">The method implementations.</param>
            <param name="mixins">The mixins.</param>
            <returns>Wrapped instance.</returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.WrapClass``1(``0,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Wraps the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodImplementations">The method implementations.</param>
            <param name="mixins">The mixins.</param>
            <param name="constructorArguments">The constructor arguments.</param>
            <returns>Wrapped instance.</returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.IsExtendClassEligible(System.Type)">
            <summary>
            Determines whether the specified type is extend class eligible.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is extend class eligible] [the specified type]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.ExtendClass``1(System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod})">
            <summary>
            Extends the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="methodImplementations">The method implementations.</param>
            <returns>Extended instance.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.ExtendClass``1(System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Extends the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="methodImplementations">The method implementations.</param>
            <param name="mixins">The mixins.</param>
            <returns>Extended instance.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IProxyFactory.ExtendClass``1(System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Extends the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="methodImplementations">The method implementations.</param>
            <param name="mixins">The mixins.</param>
            <param name="constructorArguments">The constructor arguments.</param>
            <returns>Extended instance.</returns>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IResourceContext">
            <summary>
            <c>IResourceContext</c> provides implementations of <see cref="T:Glimpse.Core.Extensibility.IResource"/> access to their parameters and the <see cref="T:Glimpse.Core.Framework.IReadOnlyPersistenceStore"/>.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IResourceContext.Parameters">
            <summary>
            Gets the parameters that the resource has declared.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IResourceContext.PersistenceStore">
            <summary>
            Gets the read only persistence store so that historical requests can 
            be accessed.
            </summary>
            <value>The persistence store.</value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IResourceResultContext">
            <summary>
            <c>IResourceResultContext</c> provides implementations of <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> access to the
            <see cref="T:Glimpse.Core.Framework.IRequestResponseAdapter"/>, <see cref="T:Glimpse.Core.Extensibility.ISerializer"/> and <see cref="T:Glimpse.Core.Extensibility.IHtmlEncoder"/>.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IResourceResultContext.RequestResponseAdapter">
            <summary>
            Gets the framework provider.
            </summary>
            <value>The framework provider.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IResourceResultContext.Serializer">
            <summary>
            Gets the serializer.
            </summary>
            <value>The serializer.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IResourceResultContext.HtmlEncoder">
            <summary>
            Gets the HTML encoder.
            </summary>
            <value>The HTML encoder.</value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IStaticClientScript">
            <summary>
            <c>IStaticClientScript</c>'s are a special type of <see cref="T:Glimpse.Core.Extensibility.IClientScript"/> that sets the <c>&lt;script&gt;</c> tag's <c>src</c> attribute to a given uri.
            </summary>
            <remarks>
            It is up to the implementer of <c>IStaticClientScript</c> to host a given resource. 
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IStaticClientScript.GetUri(System.String)">
            <summary>
            Gets the Uri to set as the value for the <c>src</c> attribute.
            </summary>
            <remarks>
            The returned Uri should only point to JavaScript files since the <c>&lt;script&gt;</c> tag will be rendered with a <c>type='text/javascript'</c> attribute.
            </remarks>
            <param name="version">
            A unique string that should be combined with the Uri to allow for Http cache invalidation.
            <example>
            In this example, the version parameter is appended to a query string argument.
            <code>
            public string GetUri(string version)
            {
                return "//localhost/scripts/myScript.js?v=" + version;
            }
            </code>
            </example>
            </param>
            <returns>A string Uri pointing to a JavaScript asset.</returns>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ITabSetupContext">
            <summary>
            Definition for the context which is used during tab setup.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ITabSetupContext.GetTabStore">
            <summary>
            Gets the tab store.
            </summary>
            <returns>Data store that can be used.</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ITabSetupContext.MessageBroker">
            <summary>
            Gets the message broker.
            </summary>
            <value>The message broker.</value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.JsonNetSerializationConverterAdapter">
            <summary>
            An adapter which converts Glimpse's <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> to Json.Net <see cref="T:Newtonsoft.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.JsonNetSerializationConverterAdapter.#ctor(Glimpse.Core.Extensibility.ISerializationConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.JsonNetSerializationConverterAdapter"/> class.
            </summary>
            <param name="converter">The converter.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.JsonNetSerializationConverterAdapter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.JsonNetSerializationConverterAdapter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
            <exception cref="T:System.NotSupportedException">An exception is thrown if this method is called because it it not supported by Glimpse.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.JsonNetSerializationConverterAdapter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
              <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Glimpse.Core.Extensibility.JsonNetSerializer">
            <summary>
            An implementation of <see cref="T:Glimpse.Core.Extensibility.ISerializer"/> which leverages Json.Net.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ISerializer">
            <summary>
            Definition for a provider that can serialize complex objects to JSON.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ISerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object to JSON.
            </summary>
            <param name="target">The target to be Serialized.</param>
            <returns>Serialized object.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ISerializer.RegisterSerializationConverters(System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.ISerializationConverter})">
            <summary>
            Registers a collection of serialization converters which can conduct custom
            transformations on given types when processed.
            </summary>
            <param name="converters">The converters.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.JsonNetSerializer.#ctor(Glimpse.Core.Extensibility.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.JsonNetSerializer"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.JsonNetSerializer.Serialize(System.Object)">
            <summary>
            Serializes the specified object to JSON.
            </summary>
            <param name="target">The target to be Serialized.</param>
            <returns>
            Serialized object.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensibility.JsonNetSerializer.RegisterSerializationConverters(System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.ISerializationConverter})">
            <summary>
            Registers a collection of serialization converters which can conduct custom
            transformations on given types when processed.
            </summary>
            <param name="converters">The converters.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if <paramref name="converters"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Glimpse.Core.Extensibility.LoggerBase">
            <summary>
            An abstract base class which provides <see cref="T:Glimpse.Core.Extensibility.ILogger"/> implementations with message formatting abilities.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ILogger">
            <summary>
            Definition of the internal logger that will used by the system.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Trace(System.String)">
            <summary>
            Log message at Trace level. 
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Debug(System.String)">
            <summary>
            Log message at Debug level. 
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Info(System.String)">
            <summary>
            Log message at Info level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Warn(System.String)">
            <summary>
            Log message at Warn level. 
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Error(System.String)">
            <summary>
            Log message at Error level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Fatal(System.String)">
            <summary>
            Log message at Fatal level. 
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Trace(System.String,System.Exception)">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Debug(System.String,System.Exception)">
            <summary>
            Log message at Debug level. 
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Info(System.String,System.Exception)">
            <summary>
            Log message at Info level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Warn(System.String,System.Exception)">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Error(System.String,System.Exception)">
            <summary>
            Log message at Error level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Fatal(System.String,System.Exception)">
            <summary>
            Log message at Fatal level. 
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Trace(System.String,System.Object[])">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Log message at Debug level. 
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Info(System.String,System.Object[])">
            <summary>
            Log message at Info level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Warn(System.String,System.Object[])">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Error(System.String,System.Object[])">
            <summary>
            Log message at Error level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            Log message at Fatal level. 
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Trace(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Debug(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Debug level. 
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Info(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Info level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Warn(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Error(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Error level. 
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ILogger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Trace(System.String)">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Debug(System.String)">
            <summary>
            Log message at Debug level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Info(System.String)">
            <summary>
            Log message at Info level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Warn(System.String)">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Error(System.String)">
            <summary>
            Log message at Error level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Fatal(System.String)">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Trace(System.String,System.Exception)">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Debug(System.String,System.Exception)">
            <summary>
            Log message at Debug level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Info(System.String,System.Exception)">
            <summary>
            Log message at Info level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Warn(System.String,System.Exception)">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Error(System.String,System.Exception)">
            <summary>
            Log message at Error level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Fatal(System.String,System.Exception)">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Trace(System.String,System.Object[])">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Debug(System.String,System.Object[])">
            <summary>
            Log message at Debug level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Info(System.String,System.Object[])">
            <summary>
            Log message at Info level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Warn(System.String,System.Object[])">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Error(System.String,System.Object[])">
            <summary>
            Log message at Error level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Fatal(System.String,System.Object[])">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Trace(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Debug(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Debug level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Info(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Info level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Warn(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Error(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Error level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.LoggerBase.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:Glimpse.Core.Extensibility.MessageBroker">
            <summary>
            The default implementation of <see cref="T:Glimpse.Core.Extensibility.IMessageBroker"/> which supports subscribing to messages based on types, base types and interfaces.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.MessageBroker.#ctor(System.Func{System.Boolean},Glimpse.Core.Extensibility.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.MessageBroker"/> class.
            </summary>
            <param name="messagePublishingAllowed">Delegate indicating whether or not messages are allowed to be published</param>
            <param name="logger">The logger.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if <paramref name="logger"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.MessageBroker.Publish``1(``0)">
            <summary>
            Publishes the specified message using the type as the topic.
            </summary>
            <typeparam name="T">Type of the message</typeparam>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.MessageBroker.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribes the specified action to the Type specified.
            </summary>
            <typeparam name="T">Type of the message</typeparam>
            <param name="action">The action.</param>
            <returns>
            A subscription Id, which should be retained in order to unsubscribe.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throws an exception if <paramref name="action"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.MessageBroker.Unsubscribe``1(System.Guid)">
            <summary>
            Unsubscribes the listener from the specified subscription id.
            </summary>
            <typeparam name="T">Type of the message</typeparam>
            <param name="subscriptionId">The subscription id.</param>
        </member>
        <member name="P:Glimpse.Core.Extensibility.MessageBroker.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.MessageBroker.Subscriptions">
            <summary>
            Gets or sets the subscriptions.
            </summary>
            <value>
            The subscriptions.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.TimerResult`1">
            <summary>
            A subtype of <see cref="T:Glimpse.Core.Extensibility.TimerResult"/> which includes the result of non-void method calls.
            </summary>
            <typeparam name="T">The type returned by the executed method.</typeparam>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TimerResult`1.Result">
            <summary>
            Gets or sets the result.
            </summary>
            <value>
            The result.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.NLogLogger">
            <summary>
            An implementation of <see cref="T:Glimpse.Core.Extensibility.ILogger"/> based on NLog.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.#ctor(NLog.Logger)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.NLogLogger"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Trace(System.String)">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Debug(System.String)">
            <summary>
            Log message at Debug level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Info(System.String)">
            <summary>
            Log message at Info level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Warn(System.String)">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Error(System.String)">
            <summary>
            Log message at Error level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Fatal(System.String)">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Trace(System.String,System.Exception)">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Debug(System.String,System.Exception)">
            <summary>
            Log message at Debug level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Info(System.String,System.Exception)">
            <summary>
            Log message at Info level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Warn(System.String,System.Exception)">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Error(System.String,System.Exception)">
            <summary>
            Log message at Error level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NLogLogger.Fatal(System.String,System.Exception)">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Glimpse.Core.Extensibility.NullLogger">
            <summary>
            An <see cref="T:Glimpse.Core.Extensibility.ILogger"/> implementation of the Null Object pattern for use when Glimpse if configured to not use logging.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Trace(System.String)">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Debug(System.String)">
            <summary>
            Log message at Debug level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Info(System.String)">
            <summary>
            Log message at Info level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Warn(System.String)">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Error(System.String)">
            <summary>
            Log message at Error level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Fatal(System.String)">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Trace(System.String,System.Exception)">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Debug(System.String,System.Exception)">
            <summary>
            Log message at Debug level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Info(System.String,System.Exception)">
            <summary>
            Log message at Info level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Warn(System.String,System.Exception)">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Error(System.String,System.Exception)">
            <summary>
            Log message at Error level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Fatal(System.String,System.Exception)">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Trace(System.String,System.Object[])">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Debug(System.String,System.Object[])">
            <summary>
            Log message at Debug level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Info(System.String,System.Object[])">
            <summary>
            Log message at Info level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Warn(System.String,System.Object[])">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Error(System.String,System.Object[])">
            <summary>
            Log message at Error level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Fatal(System.String,System.Object[])">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Trace(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Trace level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Debug(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Debug level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Info(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Info level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Warn(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Warn level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Error(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Error level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Glimpse.Core.Extensibility.NullLogger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            Log message at Fatal level.
            </summary>
            <param name="messageFormat">The message format.</param>
            <param name="exception">The exception.</param>
            <param name="args">The args.</param>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ResourceContext">
            <summary>
            The implementation of <see cref="T:Glimpse.Core.Extensibility.IResourceContext"/>, used in the <c>Execute</c> method of <see cref="T:Glimpse.Core.Extensibility.IResource"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ResourceContext.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},Glimpse.Core.Framework.IReadOnlyPersistenceStore,Glimpse.Core.Extensibility.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.ResourceContext"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="persistenceStore">The persistence store.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ResourceContext.Parameters">
            <summary>
            Gets or sets the parameters that the resource has declared.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ResourceContext.PersistenceStore">
            <summary>
            Gets or sets the read only persistence store so that historical requests can
            be accessed.
            </summary>
            <value>
            The persistence store.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ResourceContext.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ResourceParameter">
            <summary>
            A collection of commonly used <see cref="T:Glimpse.Core.Extensibility.ResourceParameterMetadata"/> objects.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ResourceParameter.RequestId">
            <summary>
            The required 'Request Id' parameter.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ResourceParameter.VersionNumber">
            <summary>
            The required 'Version' parameter used for cache busting.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ResourceParameter.Callback">
            <summary>
            The optional 'Callback' parameter used for JsonP requests.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ResourceParameter.Timestamp">
            <summary>
            The required 'Stamp' parameter.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ResourceParameter.Hash">
            <summary>
            The optional 'Hash' parameter used for HTTP cache busting.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ResourceParameter.LogoName">
            <summary>
            The required 'logoname' parameter.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ResourceResultContext">
            <summary>
            The implementation of <see cref="T:Glimpse.Core.Extensibility.IResourceResultContext"/> used in the <c>Execute</c> method of <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ResourceResultContext.#ctor(Glimpse.Core.Extensibility.ILogger,Glimpse.Core.Framework.IRequestResponseAdapter,Glimpse.Core.Extensibility.ISerializer,Glimpse.Core.Extensibility.IHtmlEncoder)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.ResourceResultContext"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="requestResponseAdapter">The framework provider.</param>
            <param name="serializer">The serializer.</param>
            <param name="htmlEncoder">The HTML encoder.</param>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ResourceResultContext.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ResourceResultContext.RequestResponseAdapter">
            <summary>
            Gets or sets the framework provider.
            </summary>
            <value>
            The framework provider.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ResourceResultContext.Serializer">
            <summary>
            Gets or sets the serializer.
            </summary>
            <value>
            The serializer.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ResourceResultContext.HtmlEncoder">
            <summary>
            Gets or sets the HTML encoder.
            </summary>
            <value>
            The HTML encoder.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ScriptOrder">
            <summary>
            The <c>ScriptOrder</c> enumeration specifies the sorting order placement of <c>&lt;script&gt;</c> tags generated by <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>'s within a page response.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ScriptOrder.IncludeBeforeClientInterfaceScript">
            <summary>
            The first <c>&lt;script&gt;</c> tags rendered. The Glimpse client has not yet been rendered, as such <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>'s with this <see cref="T:Glimpse.Core.Extensibility.ScriptOrder"/> should only perform setup tasks.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ScriptOrder.ClientInterfaceScript">
            <summary>
            The <c>&lt;script&gt;</c> tags representing the main Glimpse client.
            </summary>
            <remarks>
            This value is typically only used by Glimpse itself to render the main Glimpse JavaScript client.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ScriptOrder.IncludeAfterClientInterfaceScript">
            <summary>
            The <c>&lt;script&gt;</c> tags rendered immediately after the Glimpse client. These scripts usually customize or extend the Glimpse client.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ScriptOrder.RequestMetadataScript">
            <summary>
            The <c>&lt;script&gt;</c> tags representing a resource to obtain Glimpse's server side configuration metadata.
            </summary>
            <remarks>
            This value is typically only used by Glimpse server implementers.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ScriptOrder.IncludeBeforeRequestDataScript">
            <summary>
            The <c>&lt;script&gt;</c> tags rendered after Glimpse's server side configuration metadata. These scripts usually append or alter the server side metadata before the client has actually rendered.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ScriptOrder.RequestDataScript">
            <summary>
            The <c>&lt;script&gt;</c> tags representing a resource to all metadata gathered for the given Http request.
            </summary>
            <remarks>
            This value is typically only used by Glimpse server implementers.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Extensibility.ScriptOrder.IncludeAfterRequestDataScript">
            <summary>
            The last <c>&lt;script&gt;</c> tags rendered. These scripts usually append or alter Http request data.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.TabBase">
            <summary>
            Base implementation that allows simplified the implementation of a 
            tab. NOTE, this implementation is intended for by tabs that can 
            execute on any provider (i.e. aren't bound to HttpContextBase in 
            the case of the ASP.NET provider). Most tabs wont be tied to a 
            specific provider.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ITab">
            <summary>
            <para>
            Definition for an object which will be represented in the UI as a Tab. To 
            operate you simply need to implement this interface and return an object 
            graph that you would like to view.
            </para>
            <para>
            When returning data, you can either return the object which represents the 
            Glimpse protocol or return a typed view model. It is recommended that you 
            use typed view models, as it is this object that will be stored in by the 
            Data Store. If this is done, it means that these typed objects can be queried
            at a latter stage. That said, if you are after simplicity, you can return 
            objects in the shape the Glimpse Protocol requires.
            </para>
            <para>
            If you do decide to work with a typed view model you can convert this into 
            an objects in the shape the Glimpse Protocol by implementing <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/>
            targeting the type of the view model.
            </para>
            <para>
            Alternatively, if you after simplicity and return an object which represents  
            the Glimpse protocol, you can use <see cref="T:Glimpse.Core.Tab.Assist.TabObject"/>
            and <see cref="T:Glimpse.Core.Tab.Assist.TabSection"/> as helpers.
            </para>
            <para>
            Additional functionality can be injected into via additionally implementing 
            the following interfaces:
            - <seealso cref="T:Glimpse.Core.Extensibility.IKey"/>: Key that will be used to identify the tab within the client.
            - <seealso cref="T:Glimpse.Core.Extensibility.IDocumentation"/>: URI that will describe where the documentation for the tab can be found.
            - <seealso cref="T:Glimpse.Core.Extensibility.ITabLayout"/>: Control how the layout of the content should look.
            - <seealso cref="T:Glimpse.Core.Extensibility.ITabSetup"/>: Allows tab to inject any hooks it needs within the system.
            - <seealso cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/>: Allow complex objects to be converted into the Glimpse protocol. 
            </para>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ITab.GetData(Glimpse.Core.Extensibility.ITabContext)">
            <summary>
            Gets the data that should be shown in the UI.
            </summary>
            <param name="context">The context.</param>
            <returns>Object that will be shown.</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ITab.Name">
            <summary>
            Gets the name that will show in the tab.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ITab.ExecuteOn">
            <summary>
            Gets when the <see cref="M:Glimpse.Core.Extensibility.ITab.GetData(Glimpse.Core.Extensibility.ITabContext)"/> method should run.
            </summary>
            <value>The execute on.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ITab.RequestContextType">
            <summary>
            Gets the type of the request context that the Tab relies on. If 
            returns null, the tab can be used in any context.
            </summary>
            <value>The type of the request context.</value>
        </member>
        <member name="M:Glimpse.Core.Extensibility.TabBase.GetData(Glimpse.Core.Extensibility.ITabContext)">
            <summary>
            Gets the data that should be shown in the UI.
            </summary>
            <param name="context">The context.</param>
            <returns>Object that will be shown.</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabBase.Name">
            <summary>
            Gets the name that will show in the tab.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabBase.ExecuteOn">
            <summary>
            Gets when the <see cref="M:Glimpse.Core.Extensibility.ITab.GetData(Glimpse.Core.Extensibility.ITabContext)"/> method should run.
            </summary>
            <value>The execute on.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabBase.RequestContextType">
            <summary>
            Gets the type of the request context that the Tab relies on. NOTE, 
            this implementation returns null, hence tabs implementing this base  
            can used by any provider.
            </summary>
            <value>The type of the request context.</value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.TabBase`1">
            <summary>
            Base implementation that allows simplified the implementation of a 
            tab. NOTE, this implementation is intended for by tabs that can  
            only be executed by a specific provider (i.e. ones bound to 
            HttpContextBase in the case of the ASP.NET provider). 
            </summary>
            <typeparam name="T">Type of the code provider that the tab is bound to</typeparam>
        </member>
        <member name="M:Glimpse.Core.Extensibility.TabBase`1.GetData(Glimpse.Core.Extensibility.ITabContext)">
            <summary>
            Gets the data that should be shown in the UI.
            </summary>
            <param name="context">The context.</param>
            <returns>Object that will be shown.</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabBase`1.Name">
            <summary>
            Gets the name that will show in the tab.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabBase`1.ExecuteOn">
            <summary>
            Gets when the <see cref="M:Glimpse.Core.Extensibility.ITab.GetData(Glimpse.Core.Extensibility.ITabContext)"/> method should run.
            </summary>
            <value>The execute on.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabBase`1.RequestContextType">
            <summary>
            Gets the type of the request context that the Tab relies on. NOTE,
            this implementation returns the type that the base was inherited with..
            </summary>
            <value>The type of the request context.</value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.TabContext">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ITabContext"/> implementation used by the <c>GetData</c> method of <see cref="T:Glimpse.Core.Extensibility.ITab"/>.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Extensibility.ITabContext">
            <summary>
            Definition for the context which tabs use when generating the 
            content will be returned. 
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.ITabContext.GetRequestContext``1">
            <summary>
            Gets the request context.
            </summary>
            <typeparam name="T">Type of result that is expected.</typeparam>
            <returns>The request context that is being used.</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ITabContext.TabStore">
            <summary>
            Gets access to the tab store. This is where content can be 
            stored within the context of each request.
            </summary>
            <value>The tab store.</value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.ITabContext.MessageBroker">
            <summary>
            Gets access to the message broker. This broker can be used to 
            access messages that are published over various topics during 
            a given request.
            </summary>
            <value>The message broker.</value>
        </member>
        <member name="M:Glimpse.Core.Extensibility.TabContext.#ctor(System.Object,Glimpse.Core.Extensibility.IDataStore,Glimpse.Core.Extensibility.ILogger,Glimpse.Core.Extensibility.IMessageBroker)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.TabContext"/> class.
            </summary>
            <param name="requestContext">The request context.</param>
            <param name="tabStore">The tab store.</param>
            <param name="logger">The logger.</param>
            <param name="messageBroker">The message broker.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if any parameter if <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.TabContext.GetRequestContext``1">
            <summary>
            Gets the request context.
            </summary>
            <typeparam name="T">Type of result that is expected.</typeparam>
            <returns>
            The request context that is being used.
            </returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabContext.TabStore">
            <summary>
            Gets access to the tab store. This is where content can be
            stored within the context of each request.
            </summary>
            <value>
            The tab store.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabContext.MessageBroker">
            <summary>
            Gets or sets access to the message broker. This broker can be used to
            access messages that are published over various topics during
            a given request.
            </summary>
            <value>
            The message broker.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabContext.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IRuntimePolicyContext">
            <summary>
            Definition for the context that is used when a runtime policy 
            is being executed.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IRuntimePolicyContext.GetRequestContext``1">
            <summary>
            Gets the request context.
            </summary>
            <typeparam name="T">Type of result that is expected.</typeparam>
            <returns>The request context that is being used.</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IRuntimePolicyContext.RequestMetadata">
            <summary>
            Gets the request metadata.
            </summary>
            <value>The request metadata.</value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.RuntimeEvent">
            <summary>
            Used to describe when a given <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/> should be executed.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimeEvent.Initialize">
            <summary>
            During the Glimpse initialization process.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimeEvent.BeginRequest">
            <summary>
            When a Http request is beginning.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimeEvent.BeginSessionAccess">
            <summary>
            When a Http request has begun to access user session store.
            </summary>
            <remarks>
            All frameworks may not support <c>BeginSessionAccess</c>.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimeEvent.ExecuteResource">
            <summary>
            When a Glimpse <see cref="T:Glimpse.Core.Extensibility.IResource"/> is being executed.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimeEvent.EndSessionAccess">
            <summary>
            When a Http request has ended access to the user session store.
            </summary>
            <remarks>
            All frameworks may not support <c>BeginSessionAccess</c>.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Extensibility.RuntimeEvent.EndRequest">
            <summary>
            When a Http request has ended.
            </summary>
            <remarks>
            This is the most commonly used <see cref="T:Glimpse.Core.Extensibility.RuntimeEvent"/>.
            </remarks>
        </member>
        <member name="T:Glimpse.Core.Extensibility.RuntimePolicyContext">
            <summary>
            The implementation of <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicyContext"/> used in the <c>Execute</c> method of <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.RuntimePolicyContext.#ctor(Glimpse.Core.Framework.IRequestMetadata,Glimpse.Core.Extensibility.ILogger,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.RuntimePolicyContext"/> class.
            </summary>
            <param name="requestMetadata">The request metadata.</param>
            <param name="logger">The logger.</param>
            <param name="requestContext">The request context.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if any parameters are <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.RuntimePolicyContext.GetRequestContext``1">
            <summary>
            Gets the request context.
            </summary>
            <typeparam name="T">Type of result that is expected.</typeparam>
            <returns>
            The request context that is being used.
            </returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.RuntimePolicyContext.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.RuntimePolicyContext.RequestMetadata">
            <summary>
            Gets or sets the request metadata.
            </summary>
            <value>
            The request metadata.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.TabSetupContext">
            <summary>
            The implementation of <see cref="T:Glimpse.Core.Extensibility.ITabSetupContext"/> used by the <c>Setup</c> method of <see cref="T:Glimpse.Core.Extensibility.ITabSetup"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.TabSetupContext.#ctor(Glimpse.Core.Extensibility.ILogger,Glimpse.Core.Extensibility.IMessageBroker,System.Func{Glimpse.Core.Extensibility.IDataStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Extensibility.TabSetupContext"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="messageBroker">The message broker.</param>
            <param name="tabStoreStrategy">The tab store strategy.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if any parameter is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensibility.TabSetupContext.GetTabStore">
            <summary>
            Gets the tab store.
            </summary>
            <returns>
            Data store that can be used.
            </returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabSetupContext.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabSetupContext.MessageBroker">
            <summary>
            Gets or sets the message broker.
            </summary>
            <value>
            The message broker.
            </value>
        </member>
        <member name="P:Glimpse.Core.Extensibility.TabSetupContext.TabStoreStrategy">
            <summary>
            Gets or sets the tab store strategy.
            </summary>
            <value>
            The tab store strategy.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensions.AlternateMethodContextExtensions">
            <summary>
            Extension methods to simplify common tasks completed with <see cref="T:Glimpse.Core.Extensibility.IAlternateMethodContext"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensions.AlternateMethodContextExtensions.TryProceedWithTimer(Glimpse.Core.Extensibility.IAlternateMethodContext,Glimpse.Core.Extensibility.TimerResult@)">
            <summary>
            Calls <c>Proceed</c> on the original implementation, if the current <c>RuntimePolicy</c> is not <c>Off</c>, and provides a corresponding <see cref="T:Glimpse.Core.Extensibility.TimerResult"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="timerResult">The timer result.</param>
            <returns>
            Returns <c>true</c> if <c>Proceed</c> was called on the original object, and sets <paramref name="timerResult"/>. Returns <c>false</c> and sets <paramref name="timerResult"/> to <c>null</c> if <c>RuntimePolicy</c> is <c>Off</c>.
            </returns>
        </member>
        <member name="T:Glimpse.Core.Extensions.DataStoreExtensions">
            <summary>
            Extension methods to simplify common tasks completed with <see cref="T:Glimpse.Core.Extensibility.IDataStore"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensions.DataStoreExtensions.Get``1(Glimpse.Core.Extensibility.IDataStore)">
            <summary>
            Gets an item from <paramref name="store"/> using &lt;T&gt; as a key. This method should be used in combination with <c>Set&lt;T&gt;</c>.
            </summary>
            <typeparam name="T">The type of item to retrieve and the key when used in combination with <c>Set&lt;T&gt;</c>.</typeparam>
            <param name="store">The data store instance.</param>
            <returns>
            An item of type <typeparamref name="T"/>, <c>null</c> or an <see cref="T:System.InvalidCastException"/> is thrown depending on the type of <paramref name="store"/>. Call <c>Contains&lt;T&gt;</c> first to ensure results.
            </returns>
            <exception cref="T:System.InvalidCastException">May throw an invalid cast exception if the <see cref="T:Glimpse.Core.Extensibility.IDataStore"/> item and type do not match.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensions.DataStoreExtensions.Get``1(Glimpse.Core.Extensibility.IDataStore,System.String)">
            <summary>
            Gets an item from <paramref name="store"/> using the key and casts to <c>&lt;T&gt;</c>.
            </summary>
            <typeparam name="T">The type of item to retrieve.</typeparam>
            <param name="store">The data store instance.</param>
            <param name="key">The item key.</param>
            <returns>
            An item of type <typeparamref name="T"/>, <c>null</c> or an <see cref="T:System.InvalidCastException"/> is thrown depending on the type of <paramref name="store"/>. Call <c>Contains&lt;T&gt;</c> first to ensure results.
            </returns>
            <exception cref="T:System.InvalidCastException">May throw an invalid cast exception if the <see cref="T:Glimpse.Core.Extensibility.IDataStore"/> item and type do not match.</exception>
        </member>
        <member name="M:Glimpse.Core.Extensions.DataStoreExtensions.Set``1(Glimpse.Core.Extensibility.IDataStore,``0)">
            <summary>
            Sets an item in <paramref name="store"/> using &lt;T&gt; as a key. This method should be used in combination with <c>Get&lt;T&gt;</c>.
            </summary>
            <typeparam name="T">The type of item to set.</typeparam>
            <param name="store">The data store instance.</param>
            <param name="value">The item to store.</param>
            <example>
            <code>
            <![CDATA[
            dataStore.Set("I am a string"); // inferred type
            var result = dataStore.Get<string>();
            Assert.Equals(result, "I am a string");
            
            dataStore.Set<IList<int>>(new List{ 1, 2, 3 }); // specified type
            var result = dataStore.Get<IList<int>>();
            Assert.Equals(result.Count, 3);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Glimpse.Core.Extensions.DataStoreExtensions.Contains``1(Glimpse.Core.Extensibility.IDataStore)">
            <summary>
            Determines whether <paramref name="store"/> contains and item with a key of <c>T</c>.
            </summary>
            <typeparam name="T">The item key.</typeparam>
            <param name="store">The data store instance.</param>
            <returns>
              <c>true</c> if store contains the item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Glimpse.Core.Extensions.DictionaryExtensions">
            <summary>
            Extension methods to simplify common tasks completed with <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensions.DictionaryExtensions.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value, if available, or <paramref name="ifNotFound"/>.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary to search.</param>
            <param name="key">The item key.</param>
            <param name="ifNotFound">The fallback value.</param>
            <returns>
            Returns the item in <paramref name="dictionary"/> that matches <paramref name="key"/>, falling back to the value of <paramref name="ifNotFound"/> if the item is unavailable.
            </returns>
        </member>
        <member name="T:Glimpse.Core.Extensions.NameValueCollectionExtension">
            <summary>
            Extension methods to simplify common tasks completed with <see cref="T:System.Collections.Specialized.NameValueCollection"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensions.NameValueCollectionExtension.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts a <see cref="T:System.Collections.Specialized.NameValueCollection"/> to a <c>IDictionary&lt;string, string&gt;</c>.
            </summary>
            <param name="input">The <see cref="T:System.Collections.Specialized.NameValueCollection"/> to convert.</param>
            <returns>
            A <c>IDictionary&lt;string, string&gt;</c> containing the same key/value pairs as <paramref name="input"/>.
            </returns>
        </member>
        <member name="T:Glimpse.Core.Extensions.ObjectExtensions">
            <summary>
            Extension methods to simplify common tasks completed with <see cref="T:System.Object"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensions.ObjectExtensions.ToStringOrDefault(System.Object)">
            <summary>
            Returns the value of <c>ToString</c> if <paramref name="value"/> is not null.
            </summary>
            <param name="value">The value.</param>
            <returns>The value of <c>ToString</c> if <paramref name="value"/> is not null.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensions.ObjectExtensions.GetTypeOrNull(System.Object)">
            <summary>
            Returns the value of <c>GetType</c> if <paramref name="value"/> is not null.
            </summary>
            <param name="value">The value.</param>
            <returns>The value of <c>GetType</c> if <paramref name="value"/> is not null.</returns>
        </member>
        <member name="M:Glimpse.Core.Extensions.ObjectExtensions.CastOrDefault``1(System.Object)">
            <summary>
            Casts the value to Type of T if it is not null.
            </summary>
            <param name="value">The value.</param>
            <returns>The value of cast is not null.</returns>
        </member>
        <member name="T:Glimpse.Core.Extensions.TabContextExtensions">
            <summary>
            Extension methods to simplify common tasks completed with <see cref="T:Glimpse.Core.Extensibility.ITabSetupContext"/> and <see cref="T:Glimpse.Core.Extensibility.ITabContext"/> together.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensions.TabContextExtensions.GetMessages``1(Glimpse.Core.Extensibility.ITabContext)">
            <summary>
            Gets all messages of type <c>T</c> that have been persisted with <c>PersistMessage&lt;T&gt;</c>.
            </summary>
            <typeparam name="T">The type of message to get.</typeparam>
            <param name="context">The context.</param>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of any persisted messages. If no messages has been persisted, an empty enumerable will be returned.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Extensions.TabContextExtensions.PersistMessages``1(Glimpse.Core.Extensibility.ITabSetupContext)">
            <summary>
            Persists all messages of type <c>T</c> to a thread safe store. Persisted messages can be retrieved with <c>GetMessages&lt;T&gt;</c>.
            </summary>
            <typeparam name="T">The type of message to persist.</typeparam>
            <param name="context">The context.</param>
        </member>
        <member name="T:Glimpse.Core.Framework.InMemoryPersistenceStore">
            <summary>
            An <see cref="T:Glimpse.Core.Framework.IPersistenceStore"/> which stores Glimpse request and configuration data in application store.
            </summary>
            <remarks>
            An example of an application store is <c>HttpContext.Current.Application</c> in ASP.NET.
            </remarks>
        </member>
        <member name="T:Glimpse.Core.Framework.IPersistenceStore">
            <summary>
            Defines methods to implement a store that Glimpse can 
            use to persist requests.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.IReadOnlyPersistenceStore">
            <summary>
            Defines methods to implement a read only store that Glimpse can 
            use to retrieve requests and system metadata.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.IReadOnlyPersistenceStore.GetByRequestId(System.Guid)">
            <summary>
            Gets the by request id.
            </summary>
            <param name="requestId">The request id.</param>
            <returns>Instance of the request that matches the request id.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.IReadOnlyPersistenceStore.GetByRequestIdAndTabKey(System.Guid,System.String)">
            <summary>
            Gets the by request id and tab key.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="tabKey">The tab key.</param>
            <returns>Instance of the tab data that matches the request id and tab key.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.IReadOnlyPersistenceStore.GetByRequestParentId(System.Guid)">
            <summary>
            Gets the by request parent id.
            </summary>
            <param name="parentRequestId">The parent request id.</param>
            <returns>Collection of requests that matches the parent request id.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.IReadOnlyPersistenceStore.GetTop(System.Int32)">
            <summary>
            Gets the top.
            </summary>
            <param name="count">The count.</param>
            <returns>Collection of requests that represent the top x number of requests.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.IReadOnlyPersistenceStore.GetMetadata">
            <summary>
            Gets the metadata.
            </summary>
            <returns>Metadata that is currently applied.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.IPersistenceStore.Save(Glimpse.Core.Framework.GlimpseRequest)">
            <summary>
            Saves the specified request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.IPersistenceStore.SaveMetadata(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Saves the specified system metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.InMemoryPersistenceStore.#ctor(Glimpse.Core.Extensibility.IDataStore)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.InMemoryPersistenceStore"/> class.
            </summary>
            <param name="dataStore">The data store.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.InMemoryPersistenceStore.Save(Glimpse.Core.Framework.GlimpseRequest)">
            <summary>
            Saves the specified request.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.InMemoryPersistenceStore.SaveMetadata(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Saves the specified system metadata.
            </summary>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.InMemoryPersistenceStore.GetByRequestId(System.Guid)">
            <summary>
            Gets the by request id.
            </summary>
            <param name="requestId">The request id.</param>
            <returns>
            Instance of the request that matches the request id.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Framework.InMemoryPersistenceStore.GetByRequestIdAndTabKey(System.Guid,System.String)">
            <summary>
            Gets the by request id and tab key.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="tabKey">The tab key.</param>
            <returns>
            Instance of the tab data that matches the request id and tab key.
            </returns>
            <exception cref="T:System.ArgumentException">Throws an exception if <paramref name="tabKey"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Framework.InMemoryPersistenceStore.GetByRequestParentId(System.Guid)">
            <summary>
            Gets the by request parent id.
            </summary>
            <param name="parentRequestId">The parent request id.</param>
            <returns>
            Collection of requests that matches the parent request id.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Framework.InMemoryPersistenceStore.GetTop(System.Int32)">
            <summary>
            Gets the top.
            </summary>
            <param name="count">The count.</param>
            <returns>
            Collection of requests that represent the top x number of requests.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Framework.InMemoryPersistenceStore.GetMetadata">
            <summary>
            Gets the metadata.
            </summary>
            <returns>
            Metadata that is currently applied.
            </returns>
        </member>
        <member name="T:Glimpse.Core.Framework.CacheSetting">
            <summary>
            The <see cref="T:System.Enum"/> providing type safe access to cache directives as defined in <see href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">Section 14.9 of RFC 2616</see>.
            </summary>
            <seealso href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">Hypertext Transfer Protocol Protocol - HTTP/1.1</seealso>
        </member>
        <member name="F:Glimpse.Core.Framework.CacheSetting.Public">
            <summary>
            Indicates that the response may be cached by any cache.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Framework.CacheSetting.Private">
            <summary>
            Indicates that the response is intended for a single user and must not be cached by a shared cache. 
            </summary>
        </member>
        <member name="F:Glimpse.Core.Framework.CacheSetting.NoCache">
            <summary>
            Indicates that the response should not be cached.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Framework.CacheSetting.NoStore">
            <summary>
            Indicates that the response should not be stored for sensitivity purposes.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.CastleDynamicProxyFactory">
            <summary>
            An implementation of <see cref="T:Glimpse.Core.Extensibility.IProxyFactory"/> which leverages <see href="http://www.castleproject.org/projects/dynamicproxy/">Castle DynamicProxy</see>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.#ctor(Glimpse.Core.Extensibility.ILogger,Glimpse.Core.Extensibility.IMessageBroker,System.Func{Glimpse.Core.Extensibility.IExecutionTimer},System.Func{Glimpse.Core.Extensibility.RuntimePolicy})">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.CastleDynamicProxyFactory"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="messageBroker">The message broker.</param>
            <param name="timerStrategy">The timer strategy.</param>
            <param name="runtimePolicyStrategy">The runtime policy strategy.</param>
            <exception cref="T:System.ArgumentNullException">Throws an exception if any parameter if <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.IsWrapInterfaceEligible``1(System.Type)">
            <summary>
            Determines whether the specified type is eligible to be interface wrapped.
            </summary>
            <typeparam name="TToWrap">The type to wrap.</typeparam>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if type is eligible for interface wrapping; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.WrapInterface``1(``0,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod})">
            <summary>
            Wraps the interface.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodImplementations">The method implementations.</param>
            <returns>
            Wrapped instance.
            </returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.WrapInterface``1(``0,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Wraps the interface.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodImplementations">The method implementations.</param>
            <param name="mixins">The mixins.</param>
            <returns>
            Wrapped instance.
            </returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.IsWrapClassEligible(System.Type)">
            <summary>
            Determines whether the specified type eligible to be class wrapped.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the type of eligible for class wrapping; otherwise, <c>false</c>.
            </returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.WrapClass``1(``0,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod})">
            <summary>
            Wraps the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodImplementations">The method implementations.</param>
            <returns>
            Wrapped instance.
            </returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.WrapClass``1(``0,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Wraps the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodImplementations">The method implementations.</param>
            <param name="mixins">The mixins.</param>
            <returns>
            Wrapped instance.
            </returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.WrapClass``1(``0,System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Wraps the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="instance">The instance.</param>
            <param name="methodImplementations">The method implementations.</param>
            <param name="mixins">The mixins.</param>
            <param name="constructorArguments">The constructor arguments.</param>
            <returns>
            Wrapped instance.
            </returns>
            <remarks>
            Wrapping takes a target instance, generates a new type that extends
            the input types and injects the target object within the new instance.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.IsExtendClassEligible(System.Type)">
            <summary>
            Determines whether the specified type is eligible to be extended.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if the type is eligible to be extended; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.ExtendClass``1(System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod})">
            <summary>
            Extends the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="methodImplementations">The method implementations.</param>
            <returns>
            Extended instance.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.ExtendClass``1(System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Extends the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="methodImplementations">The method implementations.</param>
            <param name="mixins">The mixins.</param>
            <returns>
            Extended instance.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Framework.CastleDynamicProxyFactory.ExtendClass``1(System.Collections.Generic.IEnumerable{Glimpse.Core.Extensibility.IAlternateMethod},System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Extends the class.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <param name="methodImplementations">The method implementations.</param>
            <param name="mixins">The mixins.</param>
            <param name="constructorArguments">The constructor arguments.</param>
            <returns>
            Extended instance.
            </returns>
        </member>
        <member name="P:Glimpse.Core.Framework.CastleDynamicProxyFactory.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>
            The logger.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.CastleDynamicProxyFactory.ProxyGenerator">
            <summary>
            Gets or sets the proxy generator.
            </summary>
            <value>
            The proxy generator.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.CastleDynamicProxyFactory.MessageBroker">
            <summary>
            Gets or sets the message broker.
            </summary>
            <value>
            The message broker.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.CastleDynamicProxyFactory.RuntimePolicyStrategy">
            <summary>
            Gets or sets the runtime policy strategy.
            </summary>
            <value>
            The runtime policy strategy.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.CastleDynamicProxyFactory.TimerStrategy">
            <summary>
            Gets or sets the timer strategy.
            </summary>
            <value>
            The timer strategy.
            </value>
        </member>
        <member name="T:Glimpse.Core.Framework.CastleDynamicProxyWrapper`1">
            <summary>
            An implementation of <see cref="T:Glimpse.Core.Extensibility.IWrapper`1"/> used by <see cref="T:Glimpse.Core.Framework.CastleDynamicProxyFactory"/> to provide mixin support.
            </summary>
            <typeparam name="T">The type being wrapped.</typeparam>
        </member>
        <member name="T:Glimpse.Core.Framework.GlimpseException">
            <summary>
            A custom exception thrown for unrecoverable Glimpse issues.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseException"/> class.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseException"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:Glimpse.Core.Framework.GlimpseRequest">
            <summary>
            A class which describes a given Http request, along with the corresponding tab data gathered for that request.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRequest"/> class.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRequest.#ctor(System.Guid,Glimpse.Core.Framework.IRequestMetadata,System.Collections.Generic.IDictionary{System.String,Glimpse.Core.Framework.TabResult},System.Collections.Generic.IDictionary{System.String,Glimpse.Core.Framework.TabResult},System.TimeSpan,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRequest"/> class.
            </summary>
            <param name="requestId">The request id.</param>
            <param name="requestMetadata">The request metadata.</param>
            <param name="tabData">The plugin data.</param>
            <param name="displayData">The display data</param>
            <param name="duration">The duration.</param>
            <param name="instanceMetadata">The metadata</param>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.ClientId">
            <summary>
            Gets or sets the client id used for session tracking.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.DateTime">
            <summary>
            Gets or sets the date time of the request.
            </summary>
            <value>
            The date time of the request.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.Duration">
            <summary>
            Gets or sets the duration of the request.
            </summary>
            <value>
            The duration of the request.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.ParentRequestId">
            <summary>
            Gets or sets the parent request id.
            </summary>
            <value>
            The parent request id.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.RequestId">
            <summary>
            Gets or sets the request id.
            </summary>
            <value>
            The request id.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.RequestIsAjax">
            <summary>
            Gets or sets a value indicating whether the request is an Ajax request.
            </summary>
            <value>
              <c>true</c> if the request is an Ajax request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.RequestHttpMethod">
            <summary>
            Gets or sets the request's HTTP method.
            </summary>
            <value>
            The request's HTTP method.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.RequestUri">
            <summary>
            Gets or sets the request's Uri.
            </summary>
            <value>
            The request's Uri.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.ResponseContentType">
            <summary>
            Gets or sets the type of the response's content type.
            </summary>
            <value>
            The content type of the response.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.ResponseStatusCode">
            <summary>
            Gets or sets the response status code.
            </summary>
            <value>
            The response status code.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.TabData">
            <summary>
            Gets or sets the tab data for the Http request.
            </summary>
            <value>
            The tab data.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.Metadata">
            <summary>
            Gets or sets the metadata that targeted at this specific request.
            </summary>
            <value>
            The metadata data.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequest.UserAgent">
            <summary>
            Gets or sets the user agent for the request.
            </summary>
            <value>
            The user agent.
            </value>
        </member>
        <member name="T:Glimpse.Core.Framework.GlimpseRequestHeaders">
            <summary>
            Used to return a subset of <see cref="P:Glimpse.Core.Framework.GlimpseRequestHeaders.GlimpseRequest"/> properties by <see cref="T:Glimpse.Core.Resource.HistoryResource"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.GlimpseRequestHeaders.#ctor(Glimpse.Core.Framework.GlimpseRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.GlimpseRequestHeaders"/> class.
            </summary>
            <param name="glimpseRequest">The glimpse request.</param>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.ClientId">
            <summary>
            Gets the client id.
            </summary>
            <value>
            The client id.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.DateTime">
            <summary>
            Gets the date time.
            </summary>
            <value>
            The date time.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.Duration">
            <summary>
            Gets the duration.
            </summary>
            <value>
            The duration.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.ParentRequestId">
            <summary>
            Gets the parent request id.
            </summary>
            <value>
            The parent request id.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.RequestId">
            <summary>
            Gets the request id.
            </summary>
            <value>
            The request id.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.RequestIsAjax">
            <summary>
            Gets a value indicating whether [request is ajax].
            </summary>
            <value>
              <c>true</c> if [request is ajax]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.RequestHttpMethod">
            <summary>
            Gets the request HTTP method.
            </summary>
            <value>
            The request HTTP method.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.RequestUri">
            <summary>
            Gets the request URI.
            </summary>
            <value>
            The request URI.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.ResponseContentType">
            <summary>
            Gets the type of the response content.
            </summary>
            <value>
            The type of the response content.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.ResponseStatusCode">
            <summary>
            Gets the response status code.
            </summary>
            <value>
            The response status code.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.GlimpseRequestHeaders.UserAgent">
            <summary>
            Gets the user agent.
            </summary>
            <value>
            The user agent.
            </value>
        </member>
        <member name="T:Glimpse.Core.Framework.IDiscoverableCollection`1">
            <summary>
            Defines methods to self discover collection content.
            </summary>
            <typeparam name="T">Collection item type</typeparam>
        </member>
        <member name="M:Glimpse.Core.Framework.IDiscoverableCollection`1.IgnoreType(System.Type)">
            <summary>
            Ignores the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.IDiscoverableCollection`1.Discover">
            <summary>
            Discovers this instance. Triggers the loading of content.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.IDiscoverableCollection`1.AutoDiscover">
            <summary>
            Gets a value indicating whether [auto discover].
            </summary>
            <value><c>true</c> if [auto discover]; otherwise, <c>false</c>.</value>
            <remarks>
            Indicates whether the system can automatically call Discover()
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Framework.IDiscoverableCollection`1.DiscoveryLocation">
            <summary>
            Gets the discovery location.
            </summary>
            <value>The discovery location.</value>
        </member>
        <member name="T:Glimpse.Core.Framework.IConfiguration">
            <summary>
            Defines properties to provide access to system providers, stores, collections,
            factories, etc.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.ClientScripts">
            <summary>
            Gets the client scripts.
            </summary>
            <value>The client scripts.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.HtmlEncoder">
            <summary>
            Gets the HTML encoder.
            </summary>
            <value>The HTML encoder.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.PersistenceStore">
            <summary>
            Gets the persistence store.
            </summary>
            <value>The persistence store.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.Inspectors">
            <summary>
            Gets the inspectors.
            </summary>
            <value>The inspectors.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.ResourceEndpoint">
            <summary>
            Gets the resource endpoint.
            </summary>
            <value>The resource endpoint.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.Resources">
            <summary>
            Gets the resources.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.Serializer">
            <summary>
            Gets the serializer.
            </summary>
            <value>The serializer.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.Tabs">
            <summary>
            Gets the tabs.
            </summary>
            <value>The tabs.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.Metadata">
            <summary>
            Gets the metadata extensions.
            </summary>
            <value>The metadata extensions.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.TabMetadata">
            <summary>
            Gets the tab metadata extensions.
            </summary>
            <value>The tab metadata extensions.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.InstanceMetadata">
            <summary>
            Gets the tab instance metadata extensions.
            </summary>
            <value>The tab metadata extensions.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.RuntimePolicies">
            <summary>
            Gets the runtime policies.
            </summary>
            <value>The runtime policies.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.DefaultResource">
            <summary>
            Gets the default resource.
            </summary>
            <value>The default resource.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.DefaultRuntimePolicy">
            <summary>
            Gets the default runtime policy.
            </summary>
            <value>The default runtime policy.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.ProxyFactory">
            <summary>
            Gets the proxy factory.
            </summary>
            <value>The proxy factory.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.MessageBroker">
            <summary>
            Gets the message broker.
            </summary>
            <value>The message broker.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.EndpointBaseUri">
            <summary>
            Gets the endpoint base URI.
            </summary>
            <value>The endpoint base URI.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.Hash">
            <summary>
            Gets the configuration hash.
            </summary>
            <value>The hash.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.Version">
            <summary>
            Gets the version of Glimpse core.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IConfiguration.CurrentGlimpseRequestIdTracker">
            <summary>
            Gets the configured <see cref="T:Glimpse.Core.Framework.ICurrentGlimpseRequestIdTracker"/>
            </summary>
        </member>
        <member name="T:Glimpse.Core.Constants">
            <summary>
            Common constant strings used throughout Glimpse.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Constants.TabStorageKey">
            <summary>
            The key Glimpse server uses to store an <c>IDictionary&lt;string, IDataStore&gt;</c> which provides each <see cref="T:Glimpse.Core.Extensibility.ITab"/> implementation a thread safe storage mechanism.
            </summary>
            <remarks>
            Used as the key for the framework provider's local request storage mechanism (i.e. <c>HttpContext.Items</c>).
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Constants.ClientIdCookieName">
            <summary>
            The name of the cookie Glimpse will use to keep track of a user's session.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Constants.HttpRequestHeader">
            <summary>
            The name of the Http request header the Glimpse client will write the parent request ID to. 
            </summary>
            <remarks>
            In the past <see cref="F:Glimpse.Core.Constants.HttpRequestHeader"/> has used an "X-" prefix to denote a custom header, but that practice has been deprecated as of <see href="http://tools.ietf.org/html/rfc6648">RFC 6648</see>.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Constants.HttpResponseHeader">
            <summary>
            The name of the Http response header the Glimpse server will write the request ID to. 
            </summary>
            <remarks>
            In the past <see cref="F:Glimpse.Core.Constants.HttpResponseHeader"/> has used an "X-" prefix to denote a custom header, but that practice has been deprecated as of <see href="http://tools.ietf.org/html/rfc6648">RFC 6648</see>.
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Constants.TabResultsDataStoreKey">
            <summary>
            The key Glimpse server uses to store an <c>IDictionary&lt;string, TabResult&gt;</c> which stores the result of calling <c>GetData()</c> on each <see cref="T:Glimpse.Core.Extensibility.ITab"/> implementation.
            </summary>
            <remarks>
            Used as the key for the framework provider's local request storage mechanism (i.e. <c>HttpContext.Items</c>).
            </remarks>
        </member>
        <member name="F:Glimpse.Core.Constants.UserAgentHeaderName">
            <summary>
            The name of the Http request header which contains the client's user agent string as defined in <see href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43">Section 14.43 of RFC 2616 - Hypertext Transfer Protocol (HTTP/1.1)</see>.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Constants.ScriptsHaveRenderedKey">
            <summary>
            The key Glimpse server uses to track if script tags have been injected into an Http response.
            </summary>
        </member>
        <member name="F:Glimpse.Core.Constants.ClientScriptsStrategy">
            <summary>
            The key Glimpse server uses to store the client scripts strategy.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Framework.IServiceLocator">
            <summary>
            Defines methods to implement a service locator
            </summary>
            <remarks>
            Means by which authors can provide alternative implementations to the 
            default ones which the system will use by default. Primary extension injection 
            mechanism.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.IServiceLocator.GetInstance``1">
            <summary>
            Gets the instance.
            </summary>
            <typeparam name="T">The type to be resolved and returned.</typeparam>
            <returns>The instance that matches are the input Type.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.IServiceLocator.GetAllInstances``1">
            <summary>
            Gets all instances.
            </summary>
            <typeparam name="T">The type to be resolved and a collection of returned.</typeparam>
            <returns>The instance that matches are the input Type.</returns>
        </member>
        <member name="T:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1">
            <summary>
            An implementation of <see cref="T:Glimpse.Core.Framework.IDiscoverableCollection`1"/> which uses .NET reflection to find and load types.
            </summary>
            <typeparam name="T">The type to find and load.</typeparam>
        </member>
        <member name="M:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.#ctor(Glimpse.Core.Extensibility.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.Add(`0)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns>
              <c>true</c> if the collection contains the specified item; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.Remove(`0)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> is the item was removed.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.IgnoreType(System.Type)">
            <summary>
            Ignores the type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.Discover">
            <summary>
            Discovers this all instanced of <typeparamref name="T"/> within the discovery location.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.AutoDiscover">
            <summary>
            Gets or sets a value indicating whether or not auto discover.
            </summary>
            <value>
              <c>true</c> if [auto discover]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.DiscoveryLocation">
            <summary>
            Gets or sets the file path to the discovery location.
            </summary>
            <value>
            The discovery location.
            </value>
            <exception cref="T:System.IO.DirectoryNotFoundException">Throws an exception if the directory does not exist.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.ReflectionDiscoverableCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:Glimpse.Core.Framework.ResourceParameters">
            <summary>
            A class which contains all the parameters, whether named or ordered, needed to execute a resource.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.ResourceParameters.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.ResourceParameters"/> class with a set of named parameters.
            </summary>
            <param name="namedParameters">The named parameters.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.ResourceParameters.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.ResourceParameters"/> class with a set of ordered parameters.
            </summary>
            <param name="orderedParameters">The ordered parameters.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.ResourceParameters.None">
            <summary>
            Creates an instance of <see cref="T:Glimpse.Core.Extensibility.ResourceParameter"/> which contains no parameter values.
            </summary>
            <returns>An implementation of the null object pattern for <see cref="T:Glimpse.Core.Extensibility.ResourceParameter"/>.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.ResourceParameters.GetParametersFor(Glimpse.Core.Extensibility.IResource)">
            <summary>
            Gets the parameters for a given <see cref="T:Glimpse.Core.Extensibility.IResource"/>.
            </summary>
            <param name="resource">The resource.</param>
            <returns>The parameters for a given resource.</returns>
        </member>
        <member name="T:Glimpse.Core.Framework.TabResult">
            <summary>
            Contains the results of executing an <see cref="T:Glimpse.Core.Extensibility.ITab"/>, along with its key.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.TabResult.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Framework.TabResult"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="data">The data.</param>
        </member>
        <member name="P:Glimpse.Core.Framework.TabResult.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <remarks>The Data property will be serialized by the Glimpse runtime, as such, objects stored in Data should be serializable.</remarks>
            <value>
            The data.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.TabResult.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IRuntimePolicy">
            <summary>
            <para>
            <c>IRuntimePolicy</c> controls the operations Glimpse is allowed to do an Http request.
            </para>
            <para>
            When implemented, a policy will be discovered and added to the collection of policies. 
            Together, all policies determine what Glimpse is allowed to do during an Http request.
            </para>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IRuntimePolicy.Execute(Glimpse.Core.Extensibility.IRuntimePolicyContext)">
            <summary>
            Executes the specified policy with the given context.
            </summary>
            <param name="policyContext">The policy context.</param>
            <returns>A value describing what Glimpse is allowed to do during the request.</returns>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IRuntimePolicy.ExecuteOn">
            <summary>
            Gets the point in an Http request lifecycle that a policy should execute.
            </summary>
            <value>The moment to execute.</value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IDocumentation">
            <summary>
            Allows a <see cref="T:Glimpse.Core.Extensibility.ITab"/> to define what URI it should use if the Tab has supporting
            documentation.
            </summary>
            <remarks>
            If this interface isn't implemented on a <see cref="T:Glimpse.Core.Extensibility.ITab"/> no documentation will be 
            provided.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Extensibility.IDocumentation.DocumentationUri">
            <summary>
            Gets the documentation URI.
            </summary>
            <value>The documentation URI.</value>
        </member>
        <member name="T:Glimpse.Core.Extensibility.IInspector">
            <summary>
            Definition of an inspector that runs during startup. This provides the means 
            by which a Tab can setup any listeners, proxies, etc that are needed to gather the 
            data needed the corresponding <see cref="T:Glimpse.Core.Extensibility.ITab"/>. 
            </summary>
            <remarks>
            This interface can be implemented on the same class as the <see cref="T:Glimpse.Core.Extensibility.ITab"/>, but 
            typically it would be implemented on a different class for separation of concerns.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Extensibility.IInspector.Setup(Glimpse.Core.Extensibility.IInspectorContext)">
            <summary>
            Setups the specified context.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            Executed during initialization of the <see cref="T:Glimpse.Core.Framework.GlimpseRuntime"/>
            </remarks>
        </member>
        <member name="T:Glimpse.Core.Framework.IRequestResponseAdapter">
            <summary>
            Defines methods to required to implement a Glimpse framework provider. 
            Request/Response adapters allow Glimpse to work generically against any .NET based web development framework.
            </summary>
            <remarks>
            Required by any different framework - i.e. ASP.NET, Self Hosted WebAPI, 
            NancyFX, etc. See Glimpse.AspNet.AspNetFrameworkProvider
            as reference implementation.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.IRequestResponseAdapter.SetHttpResponseHeader(System.String,System.String)">
            <summary>
            Sets the Http response header.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.IRequestResponseAdapter.SetHttpResponseStatusCode(System.Int32)">
            <summary>
            Sets the Http response status code.
            </summary>
            <param name="statusCode">The status code.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.IRequestResponseAdapter.SetCookie(System.String,System.String)">
            <summary>
            Sets the cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Glimpse.Core.Framework.IRequestResponseAdapter.InjectHttpResponseBody(System.String)">
            <summary>
            Injects the Http response body.
            </summary>
            <param name="htmlSnippet">The HTML snippet.</param>
            <remarks>
            Inserts the given html snippet into the html document just before the end <c>&lt;/body&gt;</c> tag.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.IRequestResponseAdapter.WriteHttpResponse(System.Byte[])">
            <summary>
            Writes the Http response.
            </summary>
            <param name="content">The content.</param>
            <remarks>
            Used by the resource infrastructure to output binary content (i.e. embedded content,
            images, etc).
            <seealso cref="T:Glimpse.Core.Extensibility.IResourceResult"/>
            <seealso cref="T:Glimpse.Core.Extensibility.IResource"/>
            </remarks>
        </member>
        <member name="M:Glimpse.Core.Framework.IRequestResponseAdapter.WriteHttpResponse(System.String)">
            <summary>
            Writes the Http response.
            </summary>
            <param name="content">The content.</param>
            <remarks>
            Used by the resource infrastructure to output string content (i.e. generated strings,
            JSON objects, etc).
            <seealso cref="T:Glimpse.Core.Extensibility.IResourceResult"/>
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Framework.IRequestResponseAdapter.RuntimeContext">
            <summary>
            Gets the runtime context.
            </summary>
            <value>The runtime context.</value>
            <remarks>
            Instance of the underlying context that the web development framework uses.
            </remarks>
            <example>
            In ASP.NET, <c>HttpContext</c> is the runtime context.
            </example>
        </member>
        <member name="P:Glimpse.Core.Framework.IRequestResponseAdapter.RequestMetadata">
            <summary>
            Gets the request metadata.
            </summary>
            <value>The request metadata.</value>
            <remarks>
            An instance of <see cref="T:Glimpse.Core.Framework.IRequestMetadata"/> which provides relevant metadata about an Http request.
            </remarks>
            <example>
            In ASP.NET, a <c>HttpRequest</c> contains must data required for creating a <see cref="T:Glimpse.Core.Framework.IRequestMetadata"/>.
            </example>
        </member>
        <member name="T:Glimpse.Core.Framework.Configuration">
            <summary>
            Contains all configuration required by <see cref="T:Glimpse.Core.Framework.IGlimpseRuntime"/> instances to execute.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.CurrentGlimpseRequestIdTracker">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Framework.ICurrentGlimpseRequestIdTracker"/>.
            </summary>
            <value>
            The configured <see cref="T:Glimpse.Core.Framework.ICurrentGlimpseRequestIdTracker"/>.
            </value>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.ClientScripts">
            <summary>
            Gets or sets the client scripts collection.
            </summary>
            <value>
            The client scripts.
            </value>
            <returns>A collection of <see cref="T:Glimpse.Core.Extensibility.IClientScript"/> instances resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise all <see cref="T:Glimpse.Core.Extensibility.IClientScript"/>s discovered in the configured discovery location.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.DefaultResource">
            <summary>
            Gets or sets the default <see cref="T:Glimpse.Core.Extensibility.IResource"/> to execute.
            </summary>
            <value>
            The default resource.
            </value>
            <returns>A <see cref="T:Glimpse.Core.Extensibility.IResource"/> instance resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise <see cref="T:Glimpse.Core.Resource.ConfigurationResource"/>.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.DefaultRuntimePolicy">
            <summary>
            Gets or sets the default runtime policy.
            </summary>
            <value>
            The default runtime policy.
            </value>
            <returns>A <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> instance based on configuration settings.</returns>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.EndpointBaseUri">
            <summary>
            Gets or sets the endpoint base URI.
            </summary>
            <value>
            The endpoint base URI.
            </value>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.HtmlEncoder">
            <summary>
            Instantiates an instance of <see cref="T:Glimpse.Core.Extensibility.IHtmlEncoder"/>.
            </summary>
            <returns>A <see cref="T:Glimpse.Core.Extensibility.IHtmlEncoder"/> instance resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise <see cref="T:Glimpse.Core.Extensibility.AntiXssEncoder"/> (leveraging the <see href="http://wpl.codeplex.com/">Microsoft Web Protection Library</see>).</returns>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.Logger">
            <summary>
            Gets or sets the <see cref="T:Glimpse.Core.Extensibility.ILogger"/>.
            </summary>
            <value>
            The configured <see cref="T:Glimpse.Core.Extensibility.ILogger"/>.
            </value>
            <returns>A <see cref="T:Glimpse.Core.Extensibility.ILogger"/> instance resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise a <see cref="T:Glimpse.Core.Extensibility.NullLogger"/> or <see cref="T:Glimpse.Core.Extensibility.NLogLogger"/> (leveraging the <see href="http://nlog-project.org/">NLog</see> project) based on configuration settings.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.MessageBroker">
            <summary>
            Gets or sets the <see cref="T:Glimpse.Core.Extensibility.IMessageBroker"/>.
            </summary>
            <returns>A <see cref="T:Glimpse.Core.Extensibility.IMessageBroker"/> instance resolved by one of the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise <see cref="P:Glimpse.Core.Framework.Configuration.MessageBroker"/>.</returns>
            <value>
            The configured <see cref="T:Glimpse.Core.Extensibility.IMessageBroker"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.PersistenceStore">
            <summary>
            Gets or sets the <see cref="T:Glimpse.Core.Framework.IPersistenceStore"/>.
            </summary>
            <value>
            The configured <see cref="T:Glimpse.Core.Framework.IPersistenceStore"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.Inspectors">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IInspector"/>.
            </summary>
            <value>
            The configured collection of <see cref="T:Glimpse.Core.Extensibility.IInspector"/>.
            </value>
            <returns>A collection of <see cref="T:Glimpse.Core.Extensibility.IInspector"/> instances resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise all <see cref="T:Glimpse.Core.Extensibility.IInspector"/>s discovered in the configured discovery location.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.ProxyFactory">
            <summary>
            Gets or sets the <see cref="T:Glimpse.Core.Extensibility.IProxyFactory"/>.
            </summary>
            <value>
            The configured <see cref="T:Glimpse.Core.Extensibility.IProxyFactory"/>.
            </value>
            <returns>A <see cref="T:Glimpse.Core.Extensibility.IProxyFactory"/> instance resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise <see cref="T:Glimpse.Core.Framework.CastleDynamicProxyFactory"/> (leveraging <see href="http://www.castleproject.org/projects/dynamicproxy/">Castle DynamicProxy</see>.).</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.ResourceEndpoint">
            <summary>
            Gets or sets the <see cref="T:Glimpse.Core.Framework.IResourceEndpointConfiguration"/>.
            </summary>
            <value>
            The configured <see cref="T:Glimpse.Core.Framework.IResourceEndpointConfiguration"/>.
            </value>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.Resources">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IResource"/>.
            </summary>
            <value>
            The configured collection of <see cref="T:Glimpse.Core.Extensibility.IResource"/>.
            </value>
            <returns>A collection of <see cref="T:Glimpse.Core.Extensibility.IResource"/> instances resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise all <see cref="T:Glimpse.Core.Extensibility.IResource"/>s discovered in the configured discovery location.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.RuntimePolicies">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/>.
            </summary>
            <value>
            The configured collection of <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/>.
            </value>
            <returns>A collection of <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/> instances resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise all <see cref="T:Glimpse.Core.Extensibility.IRuntimePolicy"/>s discovered in the configured discovery location.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.Serializer">
            <summary>
            Gets or sets the <see cref="T:Glimpse.Core.Extensibility.ISerializer"/>.
            </summary>
            <value>
            The configured <see cref="T:Glimpse.Core.Extensibility.ISerializer"/>.
            </value>
            <returns>A <see cref="T:Glimpse.Core.Extensibility.ISerializer"/> instance resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise <see cref="T:Glimpse.Core.Extensibility.JsonNetSerializer"/> (leveraging <see href="http://json.codeplex.com/">Json.Net</see>).</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.SerializationConverters">
            <summary>
            Gets or sets a collection of <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/>s.
            </summary>
            <returns>A collection of <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> instances resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise all <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/>s discovered in the configured discovery location.</returns>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.Tabs">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.ITab"/>.
            </summary>
            <value>
            The configured <see cref="T:Glimpse.Core.Extensibility.ITab"/>.
            </value>
            <returns>A collection of <see cref="T:Glimpse.Core.Extensibility.ITab"/> instances resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise all <see cref="T:Glimpse.Core.Extensibility.ITab"/>s discovered in the configured discovery location.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.Metadata">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IMetadata"/>.
            </summary>
            <value>
            The configured <see cref="T:Glimpse.Core.Extensibility.IMetadata"/>.
            </value>
            <returns>A collection of <see cref="T:Glimpse.Core.Extensibility.IMetadata"/> instances resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise all <see cref="T:Glimpse.Core.Extensibility.ITab"/>s discovered in the configured discovery location.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.TabMetadata">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.ITabMetadata"/>.
            </summary>
            <value>
            The configured <see cref="T:Glimpse.Core.Extensibility.ITabMetadata"/>.
            </value>
            <returns>A collection of <see cref="T:Glimpse.Core.Extensibility.ITabMetadata"/> instances resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise all <see cref="T:Glimpse.Core.Extensibility.ITab"/>s discovered in the configured discovery location.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Framework.Configuration.InstanceMetadata">
            <summary>
            Gets or sets the collection of <see cref="T:Glimpse.Core.Extensibility.IInstanceMetadata"/>.
            </summary>
            <value>
            The configured <see cref="T:Glimpse.Core.Extensibility.IInstanceMetadata"/>.
            </value>
            <returns>A collection of <see cref="T:Glimpse.Core.Extensibility.IInstanceMetadata"/> instances resolved by the <see cref="T:Glimpse.Core.Framework.IServiceLocator"/>s, otherwise all <see cref="T:Glimpse.Core.Extensibility.ITab"/>s discovered in the configured discovery location.</returns>
            <exception cref="T:System.ArgumentNullException">An exception is thrown if the value is set to <c>null</c>.</exception>
        </member>
        <member name="T:Glimpse.Core.Message.TimedMessageExtension">
            <summary>
            Extension methods for populating <see cref="T:Glimpse.Core.Message.ITimedMessage"/> instances.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Message.TimedMessageExtension.AsTimedMessage``1(``0,Glimpse.Core.Extensibility.TimerResult)">
            <summary>
            Populates relevant properties on the source message.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message.</param>
            <param name="timerResult">The timer result.</param>
            <returns>The <paramref name="message"/> with populated <see cref="T:Glimpse.Core.Message.ITimedMessage"/> properties.</returns>
        </member>
        <member name="M:Glimpse.Core.Message.TimedMessageExtension.AsTimedMessage``1(``0,System.TimeSpan,System.TimeSpan,System.DateTime)">
            <summary>
            Populates relevant properties on the source message.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message.</param> 
            <param name="offset">The offset.</param>
            <param name="duration">The duration.</param>
            <param name="startTime">The start time.</param>
            <returns>The <paramref name="message"/> with populated <see cref="T:Glimpse.Core.Message.ITimedMessage"/> properties.</returns>
        </member>
        <member name="M:Glimpse.Core.Message.TimedMessageExtension.AsTimedMessage``1(``0,System.TimeSpan)">
            <summary>
            Populates relevant properties on the source message. Duration is defaulted to Zero and StartTime is not set.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message.</param> 
            <param name="offset">The offset.</param> 
            <returns>The <paramref name="message"/> with populated <see cref="T:Glimpse.Core.Message.ITimedMessage"/> properties.</returns>
        </member>
        <member name="M:Glimpse.Core.Message.TimedMessageExtension.AsTimedMessage``1(``0,System.TimeSpan,System.DateTime)">
            <summary>
            Populates relevant properties on the source message. Duration is defaulted to Zero.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message.</param> 
            <param name="offset">The offset.</param> 
            <param name="startTime">The start time.</param>
            <returns>The <paramref name="message"/> with populated <see cref="T:Glimpse.Core.Message.ITimedMessage"/> properties.</returns>
        </member>
        <member name="M:Glimpse.Core.Message.TimedMessageExtension.AsTimedMessage``1(``0,System.TimeSpan,System.TimeSpan)">
            <summary>
            Populates relevant properties on the source message. StartTime is not set.
            </summary>
            <typeparam name="T">The type of the message.</typeparam>
            <param name="message">The message.</param> 
            <param name="offset">The offset.</param>
            <param name="duration">The duration.</param> 
            <returns>The <paramref name="message"/> with populated <see cref="T:Glimpse.Core.Message.ITimedMessage"/> properties.</returns>
        </member>
        <member name="T:Glimpse.Core.Message.TimelineMessageExtension">
            <summary>
            Class TimelineMessageExtension
            </summary>
        </member>
        <member name="M:Glimpse.Core.Message.TimelineMessageExtension.AsTimelineMessage``1(``0,System.String,Glimpse.Core.Message.TimelineCategoryItem,System.String)">
            <summary>
            Extension method that makes building up a timeline event easy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message.</param>
            <param name="eventName">Name of the event.</param>
            <param name="eventCategory">The event category.</param>
            <param name="eventSubText">The event sub text.</param>
            <returns>Original message instance.</returns>
        </member>
        <member name="M:Glimpse.Core.Message.TimelineMessageExtension.AsTimelineMessage``1(``0,Glimpse.Core.Message.TimelineCategoryItem,System.String)">
            <summary>
            Extension method that makes building up a timeline event easy.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message">The message.</param>
            <param name="eventCategory">The event category.</param>
            <param name="eventSubText">The event sub text.</param>
            <returns>Original message instance.</returns>
        </member>
        <member name="T:Glimpse.Core.Message.TimelineCategory">
            <summary>
            Options that can used for timeline events.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Message.TimelineCategory.Request">
            <summary>
            Gets the timeline category for a request.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Message.TimelineCategory.Other">
            <summary>
            Gets the timeline category for a other events.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Message.TimelineCategory.User">
            <summary>
            Gets the timeline category for a user event.
            </summary>
        </member>
        <member name="T:Glimpse.Core.Message.TraceMessage">
            <summary>
            Message that captures trace events.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Message.TraceMessage.Category">
            <summary>
            Gets or sets the category the message is in.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Glimpse.Core.Message.TraceMessage.Message">
            <summary>
            Gets or sets the message content.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Glimpse.Core.Message.TraceMessage.FromFirst">
            <summary>
            Gets or sets the time from the request start.
            </summary>
            <value>From first.</value>
        </member>
        <member name="P:Glimpse.Core.Message.TraceMessage.FromLast">
            <summary>
            Gets or sets the time from the last trace event.
            </summary>
            <value>From last.</value>
        </member>
        <member name="P:Glimpse.Core.Message.TraceMessage.IndentLevel">
            <summary>
            Gets or sets the indent level of the message.
            </summary>
            <value>The indent level.</value>
        </member>
        <member name="T:Glimpse.Core.Model.TimelineCategoryModel">
            <summary>
            Colors that are used by the category model
            </summary>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineCategoryModel.EventColorHighlight">
            <summary>
            Gets or sets the main bar border color.
            </summary>
            <value>The event color highlight.</value>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineCategoryModel.EventColor">
            <summary>
            Gets or sets the main bar color.
            </summary>
            <value>The color of the event.</value>
        </member>
        <member name="T:Glimpse.Core.Model.TimelineEventModel">
            <summary>
            Model that represents an individual event that is shown in 
            the timeline.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Model.TimelineEventModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Model.TimelineEventModel"/> class.
            </summary> 
        </member>
        <member name="P:Glimpse.Core.Model.TimelineEventModel.Category">
            <summary>
            Gets or sets the category is attached to.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineEventModel.StartTime">
            <summary>
            Gets or sets the start time of the event.
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineEventModel.StartPoint">
            <summary>
            Gets or sets the start point in the total request timespan where the event starts.
            </summary>
            <value>The start point.</value>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineEventModel.Duration">
            <summary>
            Gets or sets the duration of the event.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineEventModel.Title">
            <summary>
            Gets or sets the title used to describe the event.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineEventModel.SubText">
            <summary>
            Gets or sets the sub text used to describe the event.
            </summary>
            <value>The sub text.</value>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineEventModel.Details">
            <summary>
            Gets or sets the details used to describe the event.
            </summary>
            <value>The details.</value>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineEventModel.EndPoint">
            <summary>
            Gets the end point in the total request timespan where the event finishes.
            </summary>
            <value>The end point.</value>
        </member>
        <member name="T:Glimpse.Core.Model.TimelineModel">
            <summary>
            Model that is used to populate the timeline
            </summary>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineModel.Duration">
            <summary>
            Gets or sets the overall duration of the request.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineModel.Category">
            <summary>
            Gets or sets the categories which are available.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:Glimpse.Core.Model.TimelineModel.Events">
            <summary>
            Gets or sets the events that make up the request.
            </summary>
            <value>The events.</value>
        </member>
        <member name="T:Glimpse.Core.Inspector.TraceInspector">
            <summary>
            The implementation of <see cref="T:Glimpse.Core.Extensibility.IInspector"/> for capturing <c>System.Diagnostics.Trace</c> messages.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Inspector.TraceInspector.Setup(Glimpse.Core.Extensibility.IInspectorContext)">
            <summary>
            Setups the specified context.
            </summary>
            <param name="context">The context.</param>
            <remarks>
            Executed during initialization of the <see cref="T:Glimpse.Core.Framework.GlimpseRuntime"/>
            </remarks>
        </member>
        <member name="T:Glimpse.Core.SerializationConverter.ListOfTraceMessageConverter">
            <summary>
            Converter for <see cref="T:Glimpse.Core.Message.ITraceMessage"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.SerializationConverter.ListOfTraceMessageConverter.Convert(System.Collections.Generic.IEnumerable{Glimpse.Core.Message.ITraceMessage})">
            <summary>
            Converts the specified object.
            </summary>
            <param name="obj">The object to transform.</param>
            <returns>The new object representation.</returns>
        </member>
        <member name="T:Glimpse.Core.SerializationConverter.TimelineEventModelConverter">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> implementation responsible converting <see cref="T:Glimpse.Core.Model.TimelineEventModel"/> representation's into a format suitable for serialization.
            </summary>
        </member>
        <member name="M:Glimpse.Core.SerializationConverter.TimelineEventModelConverter.Convert(Glimpse.Core.Model.TimelineEventModel)">
            <summary>
            Converts the specified model.
            </summary>
            <param name="model">The object to convert.</param>
            <returns>An object suitable for serialization.</returns>
        </member>
        <member name="T:Glimpse.Core.SerializationConverter.TimeSpanConverter">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> implementation responsible converting <see cref="T:System.TimeSpan"/> representation's into rounded off millisecond counts.
            </summary>
        </member>
        <member name="M:Glimpse.Core.SerializationConverter.TimeSpanConverter.Convert(System.Object)">
            <summary>
            Converts the specified date.
            </summary>
            <param name="date">The date.</param>
            <returns>A double of rounded off milliseconds of the length of the time span.</returns>
        </member>
        <member name="P:Glimpse.Core.SerializationConverter.TimeSpanConverter.SupportedTypes">
            <summary>
            Gets the supported types the converter will be invoked for.
            </summary>
            <value>
            The supported types.
            </value>
        </member>
        <member name="T:Glimpse.Core.Policy.AjaxPolicy">
            <summary>
            Policy which will limit Glimpse to only <c>ModifyResponseHeaders</c> if a Http request is an Ajax request.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.AjaxPolicy.Execute(Glimpse.Core.Extensibility.IRuntimePolicyContext)">
            <summary>
            Executes the specified policy with the given context.
            </summary>
            <param name="policyContext">The policy context.</param>
            <returns>
            <c>ModifyResponseHeaders</c> if request is an Ajax request, otherwise <c>On</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if <paramref name="policyContext"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Policy.AjaxPolicy.ExecuteOn">
            <summary>
            Gets the point in an Http request lifecycle that a policy should execute.
            </summary>
            <value>
            The moment to execute, <see cref="T:Glimpse.Core.Policy.AjaxPolicy"/> uses <c>BeginRequest</c>.
            </value>
        </member>
        <member name="T:Glimpse.Core.Policy.ContentTypePolicy">
            <summary>
            Policy which will set Glimpse's runtime policy to <c>Off</c> if a Http response's content type is not supported.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.ContentTypePolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Policy.ContentTypePolicy"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.ContentTypePolicy.Execute(Glimpse.Core.Extensibility.IRuntimePolicyContext)">
            <summary>
            Executes the specified policy with the given context.
            </summary>
            <param name="policyContext">The policy context.</param>
            <returns>
            <c>On</c> if the response content type is contained on the white list, otherwise <c>Off</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if <paramref name="policyContext"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Policy.ContentTypePolicy.Configurator">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Policy.ContentTypePolicyConfigurator"/> used by the <see cref="T:Glimpse.Core.Policy.ContentTypePolicy"/>
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.ContentTypePolicy.Glimpse#Core#Extensibility#IConfigurable#Configurator">
            <summary>
            Gets the configurator
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.ContentTypePolicy.ExecuteOn">
            <summary>
            Gets the point in an Http request lifecycle that a policy should execute.
            </summary>
            <value>
            The moment to execute, <see cref="T:Glimpse.Core.Policy.AjaxPolicy"/> uses <c>EndRequest</c>.
            </value>
        </member>
        <member name="T:Glimpse.Core.Policy.ControlCookiePolicy">
            <summary>
            Policy which will set Glimpse's runtime policy to <c>Off</c> unless a marker cookie named <c>'glimpsePolicy'</c> is present on the Http request.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.ControlCookiePolicy.Execute(Glimpse.Core.Extensibility.IRuntimePolicyContext)">
            <summary>
            Executes the specified policy with the given context.
            </summary>
            <param name="policyContext">The policy context.</param>
            <returns>
            <c>Off</c> unless the request contains a 'glimpsePolicy' cookie, otherwise the parsed <see cref="T:Glimpse.Core.Extensibility.RuntimePolicy"/> of the cookie.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if <paramref name="policyContext"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Policy.ControlCookiePolicy.ExecuteOn">
            <summary>
            Gets the point in an Http request lifecycle that a policy should execute.
            </summary>
            <value>
            The moment to execute, <see cref="T:Glimpse.Core.Policy.AjaxPolicy"/> uses <c>BeginRequest</c>.
            </value>
        </member>
        <member name="T:Glimpse.Core.Policy.GlimpseResourcePolicy">
            <summary>
            Policy which will limit Glimpse to only <c>ExecuteResourceOnly</c> if a Http request for an implementation of <see cref="T:Glimpse.Core.Extensibility.IResource"/>.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.GlimpseResourcePolicy.Execute(Glimpse.Core.Extensibility.IRuntimePolicyContext)">
            <summary>
            Executes the specified policy with the given context.
            </summary>
            <param name="policyContext">The policy context.</param>
            <returns>
            <c>ExecuteResourceOnly</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if <paramref name="policyContext"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Policy.GlimpseResourcePolicy.ExecuteOn">
            <summary>
            Gets the point in an Http request lifecycle that a policy should execute.
            </summary>
            <value>
            The moment to execute, <see cref="T:Glimpse.Core.Policy.AjaxPolicy"/> uses <c>ExecuteResource</c>.
            </value>
        </member>
        <member name="T:Glimpse.Core.Policy.StatusCodePolicy">
            <summary>
            Policy which will set Glimpse's runtime policy to <c>Off</c> if a Http response's status code is not on the white list.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.StatusCodePolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Policy.StatusCodePolicy"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.StatusCodePolicy.Execute(Glimpse.Core.Extensibility.IRuntimePolicyContext)">
            <summary>
            Executes the specified policy with the given context.
            </summary>
            <param name="policyContext">The policy context.</param>
            <returns>
            <c>On</c> if the response status code is contained on the white list, otherwise <c>Off</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if <paramref name="policyContext"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Policy.StatusCodePolicy.Configurator">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Policy.StatusCodePolicyConfigurator"/> used by the <see cref="T:Glimpse.Core.Policy.StatusCodePolicy"/>
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.StatusCodePolicy.Glimpse#Core#Extensibility#IConfigurable#Configurator">
            <summary>
            Gets the configurator
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.StatusCodePolicy.ExecuteOn">
            <summary>
            Gets the point in an Http request lifecycle that a policy should execute.
            </summary>
            <value>
            The moment to execute, <see cref="T:Glimpse.Core.Policy.AjaxPolicy"/> uses <c>EndRequest</c>.
            </value>
        </member>
        <member name="T:Glimpse.Core.Policy.UriPolicy">
            <summary>
            Policy which will set Glimpse's runtime policy to <c>Off</c> if a Http request's Uri matches a configured pattern
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.UriPolicy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Policy.UriPolicy"/>
            </summary>
        </member>
        <member name="M:Glimpse.Core.Policy.UriPolicy.Execute(Glimpse.Core.Extensibility.IRuntimePolicyContext)">
            <summary>
            Executes the specified policy with the given context.
            </summary>
            <param name="policyContext">The policy context.</param>
            <returns>
            <c>On</c> if the request Uri does not match a configured uri pattern, otherwise <c>Off</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if <paramref name="policyContext"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Policy.UriPolicy.Configurator">
            <summary>
            Gets the <see cref="T:Glimpse.Core.Policy.UriPolicyConfigurator"/> used by the <see cref="T:Glimpse.Core.Policy.UriPolicy"/>
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.UriPolicy.Glimpse#Core#Extensibility#IConfigurable#Configurator">
            <summary>
            Gets the configurator
            </summary>
        </member>
        <member name="P:Glimpse.Core.Policy.UriPolicy.ExecuteOn">
            <summary>
            Gets the point in an Http request lifecycle that a policy should execute.
            </summary>
            <value>
            The moment to execute, <see cref="T:Glimpse.Core.Policy.AjaxPolicy"/> uses <c>BeginRequest</c>.
            </value>
        </member>
        <member name="T:Glimpse.Core.ResourceResult.CacheControlDecorator">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ResourceResultDecorator"/> implementation responsible providing Http caching to <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> implementations via the <c>Cache-Control</c> Http response header.
            </summary>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.CacheControlDecorator.#ctor(Glimpse.Core.Extensibility.IResourceResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.ResourceResult.CacheControlDecorator"/> class.
            </summary>
            <param name="wrappedResourceResult">The wrapped resource result.</param>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.CacheControlDecorator.#ctor(System.Int64,System.Nullable{Glimpse.Core.Framework.CacheSetting},Glimpse.Core.Extensibility.IResourceResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.ResourceResult.CacheControlDecorator"/> class.
            </summary>
            <param name="cacheDuration">Duration of the cache.</param>
            <param name="cacheSetting">The cache setting.</param>
            <param name="wrappedResourceResult">The wrapped resource result.</param>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.CacheControlDecorator.Decorate(Glimpse.Core.Extensibility.IResourceResultContext)">
            <summary>
            Decorates the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Glimpse.Core.ResourceResult.CacheControlDecorator.CacheDuration">
            <summary>
            Gets or sets the duration of the cache.
            </summary>
            <value>
            The duration of the cache in seconds.
            </value>
        </member>
        <member name="P:Glimpse.Core.ResourceResult.CacheControlDecorator.CacheSetting">
            <summary>
            Gets or sets the cache directive.
            </summary>
            <value>
            The cache directive.
            </value>
        </member>
        <member name="T:Glimpse.Core.ResourceResult.ExceptionResourceResult">
            <summary>
            The <see cref="T:Glimpse.Core.ResourceResult.StatusCodeResourceResult"/> implementation responsible returning .Net exceptions to a client in a way compatible with Http.
            </summary>
        </member>
        <member name="T:Glimpse.Core.ResourceResult.StatusCodeResourceResult">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> implementation responsible returning simple status code/message pairs to a client.
            </summary>
            <remarks>
            <see cref="T:Glimpse.Core.ResourceResult.StatusCodeResourceResult"/> is typically used to convey Http error conditions to client, as is typical of Rest style architectures.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.StatusCodeResourceResult.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.ResourceResult.StatusCodeResourceResult"/> class.
            </summary>
            <param name="statusCode">The status code.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.StatusCodeResourceResult.Execute(Glimpse.Core.Extensibility.IResourceResultContext)">
            <summary>
            Executes the resource result with the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Glimpse.Core.ResourceResult.StatusCodeResourceResult.Message">
            <summary>
            Gets or sets the message to return to the client.
            </summary>
            <value>
            The message the message to return to the client.
            </value>
        </member>
        <member name="P:Glimpse.Core.ResourceResult.StatusCodeResourceResult.StatusCode">
            <summary>
            Gets or sets the status code to return to the client.
            </summary>
            <value>
            The status code to return to the client.
            </value>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.ExceptionResourceResult.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.ResourceResult.ExceptionResourceResult"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Glimpse.Core.ResourceResult.FileResourceResult">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> implementation responsible returning binary files to a client.
            </summary>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.FileResourceResult.#ctor(System.Byte[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.ResourceResult.FileResourceResult"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="contentType">Type of the content.</param>
            <exception cref="T:System.ArgumentNullException">Exception thrown if either <paramref name="content"/> or <paramref name="contentType"/> are <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.FileResourceResult.Execute(Glimpse.Core.Extensibility.IResourceResultContext)">
            <summary>
            Executes the resource result with the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Glimpse.Core.ResourceResult.FileResourceResult.Content">
            <summary>
            Gets or sets the content to send to the client.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:Glimpse.Core.ResourceResult.FileResourceResult.ContentType">
            <summary>
            Gets or sets the content type of the Content.
            </summary>
            <value>
            The content type.
            </value>
        </member>
        <member name="T:Glimpse.Core.ResourceResult.HtmlResourceResult">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> implementation responsible returning Html files to a client.
            </summary>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.HtmlResourceResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.ResourceResult.HtmlResourceResult"/> class.
            </summary>
            <param name="html">The HTML.</param>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.HtmlResourceResult.Execute(Glimpse.Core.Extensibility.IResourceResultContext)">
            <summary>
            Executes the resource result with the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Glimpse.Core.ResourceResult.HtmlResourceResult.Html">
            <summary>
            Gets or sets the Html to send to the client.
            </summary>
            <value>
            The Html.
            </value>
        </member>
        <member name="T:Glimpse.Core.ResourceResult.JsonResourceResult">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> implementation responsible returning Json data to clients.
            </summary>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.JsonResourceResult.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.ResourceResult.JsonResourceResult"/> class without a JsonP callback function.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.JsonResourceResult.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.ResourceResult.JsonResourceResult"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="callback">The callback.</param>
            <exception cref="T:System.ArgumentNullException">An exception is thrown is <paramref name="data"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.JsonResourceResult.Execute(Glimpse.Core.Extensibility.IResourceResultContext)">
            <summary>
            Executes the resource result with the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Glimpse.Core.ResourceResult.JsonResourceResult.Callback">
            <summary>
            Gets or sets the JsonP callback function.
            </summary>
            <value>
            The JsonP callback function. Option.
            </value>
        </member>
        <member name="P:Glimpse.Core.ResourceResult.JsonResourceResult.ContentType">
            <summary>
            Gets or sets the content type.
            </summary>
            <value>
            The content type.
            </value>
        </member>
        <member name="P:Glimpse.Core.ResourceResult.JsonResourceResult.Data">
            <summary>
            Gets or sets the data to serialize into Json.
            </summary>
            <value>
            The data to serialize.
            </value>
        </member>
        <member name="T:Glimpse.Core.ResourceResult.RedirectResourceResult">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> implementation responsible redirecting a client to a new Uri.
            </summary>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.RedirectResourceResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.ResourceResult.RedirectResourceResult"/> class without any parameter values in the Uri template.
            </summary>
            <param name="uriTemplate">The URI template.</param>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.RedirectResourceResult.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.ResourceResult.RedirectResourceResult"/> class.
            </summary>
            <param name="uriTemplate">The Uri template. Uri templates should conform to <see href="http://tools.ietf.org/html/rfc6570"/>RFC 6570</param>.
            <param name="data">The Uri template parameter data.</param>
            <exception cref="T:System.ArgumentNullException">Exception thrown if <paramref name="uriTemplate"/> is <c>null</c>.</exception>
            <seealso href="http://tools.ietf.org/html/rfc6570">URI Template</seealso>
        </member>
        <member name="M:Glimpse.Core.ResourceResult.RedirectResourceResult.Execute(Glimpse.Core.Extensibility.IResourceResultContext)">
            <summary>
            Executes the resource result with the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:Glimpse.Core.Resource.ClientResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse JavaScript client to the browser.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.ClientResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Resource.ClientResource"/> class.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.ClientResource.GetEmbeddedResourceInfo(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Returns the embedded resource that represents the Glimpse Client which will be returned during the execution of the <see cref="T:Glimpse.Core.Resource.FileResource"/>
            </summary>
            <param name="context">The resource context</param>
            <returns>Information about the embedded Glimpse Client</returns>
        </member>
        <member name="P:Glimpse.Core.Resource.ClientResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.ConfigurationResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse configuration page, which is usually where a user turns Glimpse on and off.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.ConfigurationResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Resource.ConfigurationResource"/> class
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.ConfigurationResource.DependsOn(System.String)">
            <summary>
            Determines whether or not the resource depends on the given resource
            </summary>
            <param name="resourceName">The internal name of the resource</param>
            <returns>Boolean indicating whether or not the resource depends on the given resource</returns>
        </member>
        <member name="M:Glimpse.Core.Resource.ConfigurationResource.Execute(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Executes the specified resource with the specific context.
            </summary>
            <param name="context">The context.</param>
            <returns>
              <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> that can be executed when the Http response is ready to be returned.
            </returns>
            <exception cref="T:System.NotSupportedException">Throws a <see cref="T:System.NotSupportedException"/> since this is a <see cref="T:Glimpse.Core.Extensibility.IPrivilegedResource"/>.</exception>
        </member>
        <member name="M:Glimpse.Core.Resource.ConfigurationResource.Execute(Glimpse.Core.Extensibility.IResourceContext,Glimpse.Core.Framework.IReadonlyConfiguration,Glimpse.Core.Framework.IRequestResponseAdapter)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="configuration">The configuration.</param>
            <param name="requestResponseAdapter">The request response adapter.</param>
            <returns>
            A <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if either <paramref name="context"/> or <paramref name="configuration"/> are <c>null</c>.</exception>
            <remarks>
            Use of <see cref="T:Glimpse.Core.Extensibility.IPrivilegedResource"/> is reserved.
            </remarks>
            
        </member>
        <member name="P:Glimpse.Core.Resource.ConfigurationResource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
            <value>
            The name.
            </value>
            <remarks>
            Resource name's should be unique across a given web application. If multiple <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Resource.ConfigurationResource.Parameters">
            <summary>
            Gets the required or optional parameters that a resource needs as processing input.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.ConfigurationResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.AjaxResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse client a listing of Ajax requests, filtered by parent request ID.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.AjaxResource.Execute(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Executes the specified resource with the specific context.
            </summary>
            <param name="context">The context.</param>
            <returns>
              <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> that can be executed when the Http response is ready to be returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Resource.AjaxResource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
            <value>
            The name.
            </value>
            <remarks>
            Resource name's should be unique across a given web application. If multiple <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Resource.AjaxResource.Parameters">
            <summary>
            Gets the required or optional parameters that a resource needs as processing input.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.AjaxResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.HistoryResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse client a listing of historical requests, grouped by client.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.HistoryResource.Execute(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Executes the specified resource with the specific context.
            </summary>
            <param name="context">The context.</param>
            <returns>
              <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> that can be executed when the Http response is ready to be returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Resource.HistoryResource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
            <value>
            The name.
            </value>
            <remarks>
            Resource name's should be unique across a given web application. If multiple <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Resource.HistoryResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.HistoryResource.Parameters">
            <summary>
            Gets the required or optional parameters that a resource needs as processing input.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.LogoResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse client the Glimpse logo.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.LogoResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Resource.LogoResource"/> class.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.LogoResource.GetEmbeddedResourceInfo(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Returns the embedded resource that represents the Glimpse text logo which will be returned during the execution of the <see cref="T:Glimpse.Core.Resource.FileResource"/>
            </summary>
            <param name="context">The resource context</param>
            <returns>Information about the embedded Glimpse text logo</returns>
        </member>
        <member name="P:Glimpse.Core.Resource.LogoResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.PopupResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse client the Html needed to render the Glimpse pop-up window.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.PopupResource.Execute(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Executes the specified resource with the specific context.
            </summary>
            <param name="context">The context.</param>
            <returns>
              <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> that can be executed when the Http response is ready to be returned.
            </returns>
            <exception cref="T:System.NotSupportedException">Throws a <see cref="T:System.NotSupportedException"/> since this is a <see cref="T:Glimpse.Core.Extensibility.IPrivilegedResource"/>.</exception>
        </member>
        <member name="M:Glimpse.Core.Resource.PopupResource.Execute(Glimpse.Core.Extensibility.IResourceContext,Glimpse.Core.Framework.IReadonlyConfiguration,Glimpse.Core.Framework.IRequestResponseAdapter)">
            <summary>
            Executes the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="configuration">The configuration.</param>
            <param name="requestResponseAdapter">The request response.</param>
            <returns>
            A <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if either <paramref name="context"/> or <paramref name="configuration"/> are <c>null</c>.</exception>
            <remarks>
            Use of <see cref="T:Glimpse.Core.Extensibility.IPrivilegedResource"/> is reserved.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Resource.PopupResource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
            <value>
            The name.
            </value>
            <remarks>
            Resource name's should be unique across a given web application. If multiple <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Resource.PopupResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.PopupResource.Parameters">
            <summary>
            Gets the required or optional parameters that a resource needs as processing input.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.RequestResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse client all diagnostics information gathered by Glimpse for a specific request.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.RequestResource.Execute(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Executes the specified resource with the specific context.
            </summary>
            <param name="context">The context.</param>
            <returns>
              <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> that can be executed when the Http response is ready to be returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">Exception thrown if <paramref name="context"/> is <c>null</c>.</exception>
        </member>
        <member name="P:Glimpse.Core.Resource.RequestResource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
            <value>
            The name.
            </value>
            <remarks>
            Resource name's should be unique across a given web application. If multiple <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Resource.RequestResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.RequestResource.Parameters">
            <summary>
            Gets the required or optional parameters that a resource needs as processing input.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.MetadataResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse client all pertinent system configuration information.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.MetadataResource.Execute(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Executes the specified resource with the specific context.
            </summary>
            <param name="context">The context.</param>
            <returns>
              <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> that can be executed when the Http response is ready to be returned.
            </returns>
        </member>
        <member name="P:Glimpse.Core.Resource.MetadataResource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
            <value>
            The name.
            </value>
            <remarks>
            Resource name's should be unique across a given web application. If multiple <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Resource.MetadataResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.MetadataResource.Parameters">
            <summary>
            Gets the required or optional parameters that a resource needs as processing input.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.SpriteResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse client the image sprite containing user interface icons.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.SpriteResource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.Resource.SpriteResource"/> class.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resource.SpriteResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="T:Glimpse.Core.Resource.VersionCheckResource">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementation responsible for providing the Glimpse client the newest version number of Glimpse.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Resource.VersionCheckResource.Execute(Glimpse.Core.Extensibility.IResourceContext)">
            <summary>
            Executes the specified resource with the specific context.
            </summary>
            <param name="context">The context.</param>
            <returns>
              <see cref="T:Glimpse.Core.Extensibility.IResourceResult"/> that can be executed when the Http response is ready to be returned.
            </returns>
        </member>
        <member name="P:Glimpse.Core.Resource.VersionCheckResource.Name">
            <summary>
            Gets the name of the resource.
            </summary>
            <value>
            The name.
            </value>
            <remarks>
            Resource name's should be unique across a given web application. If multiple <see cref="T:Glimpse.Core.Extensibility.IResource"/> implementations contain the same name, Glimpse may throw an exception resulting in an Http 500 Server Error.
            </remarks>
        </member>
        <member name="P:Glimpse.Core.Resource.VersionCheckResource.Key">
            <summary>
            Gets the key.
            </summary>
            <value>
            The key. Only valid JavaScript identifiers should be used for future compatibility.
            </value>
        </member>
        <member name="P:Glimpse.Core.Resource.VersionCheckResource.Parameters">
            <summary>
            Gets the required or optional parameters that a resource needs as processing input.
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="T:Glimpse.Core.Framework.IRequestMetadata">
            <summary>
            Defines properties that describe the metadata associated with a request
            </summary>
        </member>
        <member name="M:Glimpse.Core.Framework.IRequestMetadata.GetCookie(System.String)">
            <summary>
            Gets the cookie.
            </summary>
            <param name="name">The name.</param>
            <returns>Value of the Http cookie.</returns>
        </member>
        <member name="M:Glimpse.Core.Framework.IRequestMetadata.GetHttpHeader(System.String)">
            <summary>
            Gets the HTTP header.
            </summary>
            <param name="name">The name.</param>
            <returns>Value of the Http header.</returns>
        </member>
        <member name="P:Glimpse.Core.Framework.IRequestMetadata.RequestUri">
            <summary>
            Gets the request URI.
            </summary>
            <value>The request URI.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IRequestMetadata.RequestHttpMethod">
            <summary>
            Gets the request HTTP method.
            </summary>
            <value>The request HTTP method.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IRequestMetadata.ResponseStatusCode">
            <summary>
            Gets the response status code.
            </summary>
            <value>The response status code.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IRequestMetadata.ResponseContentType">
            <summary>
            Gets the type of the response content.
            </summary>
            <value>The type of the response content.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IRequestMetadata.RequestIsAjax">
            <summary>
            Gets a value indicating whether request is ajax.
            </summary>
            <value><c>true</c> if request is ajax; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Glimpse.Core.Framework.IRequestMetadata.ClientId">
            <summary>
            Gets the client id.
            </summary>
            <value>The client id.</value>
        </member>
        <member name="T:Glimpse.Core.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.AlternateTypeGenerationHookMethodsInspected">
            <summary>
              Looks up a localized string similar to Methods inspected via proxy generation hook on type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.AlternateTypeGenerationHookNonProxyableMemberNotification">
            <summary>
              Looks up a localized string similar to {0} method of type &apos;{1}&apos; is not proxyable..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.BeginRequestOutOfOrderRuntimeMethodCall">
            <summary>
              Looks up a localized string similar to Initialize method has not been called in the context on the current Glimpse runtime instance. Calls to BeginRequest must be preceded by calls to Initialize..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.DiscoverableCollectionAdd">
            <summary>
              Looks up a localized string similar to Added {0} of type &apos;{1}&apos; to collection..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.DiscoverableCollectionClear">
            <summary>
              Looks up a localized string similar to Cleared {0} collection..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.DiscoverableCollectionDiscover">
            <summary>
              Looks up a localized string similar to Discovered {0} of type &apos;{1}&apos; and added it to collection..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.DiscoverableCollectionRemove">
            <summary>
              Looks up a localized string similar to Removed {0} of type &apos;{1}&apos; from collection..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.DiscoverCreateInstance">
            <summary>
              Looks up a localized string similar to Exception loading &apos;{0}&apos; of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.DiscoverGetType">
            <summary>
              Looks up a localized string similar to Failed to load type when getting types from assembly &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.DiscoverLoadAssembly">
            <summary>
              Looks up a localized string similar to Exception loading assembly at path &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.ExecuteInstanceMetadataExtensionsError">
            <summary>
              Looks up a localized string similar to Instance extension of type &apos;{0}&apos; failed to execute..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.ExecuteMetadataExtensionsError">
            <summary>
              Looks up a localized string similar to Extension of type &apos;{0}&apos; failed to execute..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.ExecutePolicyWarning">
            <summary>
              Looks up a localized string similar to Exception executing policy of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.ExecuteResourceDuplicateError">
            <summary>
              Looks up a localized string similar to Ambiguous resource with name &apos;{0}&apos; found..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.ExecuteResourceInsufficientPolicy">
            <summary>
              Looks up a localized string similar to Runtime policy does not allow execution of resource named &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.ExecuteResourceMissingError">
            <summary>
              Looks up a localized string similar to Resource with name &apos;{0}&apos; could not be found..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.ExecuteTabError">
            <summary>
              Looks up a localized string similar to Exception executing tab of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.ExecuteTabMetadataExtensionsError">
            <summary>
              Looks up a localized string similar to Extension tab of type &apos;{0}&apos; failed to execute..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.GenerateScriptTagsDynamicException">
            <summary>
              Looks up a localized string similar to Exception generating script tag for dynamic IClientScript of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.GenerateScriptTagsStaticException">
            <summary>
              Looks up a localized string similar to Exception generating script tag for static IClientScript of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.GenerateUriExecutionError">
            <summary>
              Looks up a localized string similar to Exception generating uri with ResourceEndpointConfiguration of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.GenerateUriParameterKeysWarning">
            <summary>
              Looks up a localized string similar to Exception getting Parameters for IResource of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.GlimpseRuntimeEndRequesPersistError">
            <summary>
              Looks up a localized string similar to Could not persist metadata with IPersistenceStore of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.GlimpseRuntimeExecuteResourceError">
            <summary>
              Looks up a localized string similar to Error executing IResource &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.GlimpseRuntimeExecuteResourceResultError">
            <summary>
              Looks up a localized string similar to Error executing resource result of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.GlimpseRuntimeInitializeSetupInspector">
            <summary>
              Looks up a localized string similar to Setup IInspector of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.GlimpseRuntimePersistMetadataMultipleResourceWarning">
            <summary>
              Looks up a localized string similar to Multiple Resources with name of &apos;{0}&apos;. Resources should have unique names..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.InitializeInspectorError">
            <summary>
              Looks up a localized string similar to Exception initializing inspector of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.InitializeTabError">
            <summary>
              Looks up a localized string similar to Exception initializing tab of type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.InstantiateFrameworkProviderException">
            <summary>
              Looks up a localized string similar to Unable to instantiate Framework Provider from IServiceLocator: &apos;{0}&apos; or &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.InstantiateResourceEndpointConfigurationException">
            <summary>
              Looks up a localized string similar to Unable to instantiate Resource Endpoint Configuration from IServiceLocator: &apos;{0}&apos; or &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.MessageBrokerSubscribe">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; on type &apos;{1}&apos; has been subscribed to all &apos;{2}&apos; messages..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.PrivilegedResourceExecuteNotSupported">
            <summary>
              Looks up a localized string similar to Invalid privileged resource execution on &apos;{0}&apos;. Call overload Execute(IResourceContext, IGlimpseConfiguration) instead..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.RenderClientScriptImproperImplementationWarning">
            <summary>
              Looks up a localized string similar to Unable to render IClientScript: &apos;{0}&apos;. All IClientScript implementations should also implement either IStaticClientScript or IDynamicClientScript..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.RenderClientScriptMissingResourceWarning">
            <summary>
              Looks up a localized string similar to Unable to render IClientScript: &apos;{0}&apos;. No IResource with the Name &apos;{1}&apos; could be found..
            </summary>
        </member>
        <member name="P:Glimpse.Core.Resources.SetDiscoveryLocationDirectoryNotFoundMessage">
            <summary>
              Looks up a localized string similar to The input value &apos;{0}&apos; creates path &apos;{1}&apos;, which does not exist..
            </summary>
        </member>
        <member name="T:Glimpse.Core.SerializationConverter.DateTimeConverter">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> implementation responsible converting <see cref="T:System.DateTime"/> representation's into culturally invariant strings.
            </summary>
        </member>
        <member name="M:Glimpse.Core.SerializationConverter.DateTimeConverter.Convert(System.Object)">
            <summary>
            Converts the specified date into a culturally invariant string.
            </summary>
            <param name="date">The date.</param>
            <returns>A culturally invariant date and time string</returns>
        </member>
        <member name="P:Glimpse.Core.SerializationConverter.DateTimeConverter.SupportedTypes">
            <summary>
            Gets the supported types the converter will be invoked for.
            </summary>
            <value>
            The supported types: <see cref="T:System.DateTime"/> and <see cref="T:System.Nullable`1"/>, where <c>T</c> is a <see cref="T:System.DateTime"/>.
            </value>
        </member>
        <member name="T:Glimpse.Core.SerializationConverter.GlimpseRequestHeadersConverter">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> implementation responsible converting <see cref="T:Glimpse.Core.Framework.GlimpseRequestHeaders"/> representation's into a format suitable for serialization.
            </summary>
        </member>
        <member name="M:Glimpse.Core.SerializationConverter.GlimpseRequestHeadersConverter.Convert(Glimpse.Core.Framework.GlimpseRequestHeaders)">
            <summary>
            Converts the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns>An object suitable for serialization.</returns>
        </member>
        <member name="T:Glimpse.Core.SerializationConverter.GlimpseRequestConverter">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> implementation responsible converting <see cref="T:Glimpse.Core.Framework.GlimpseRequest"/> representation's into a format suitable for serialization.
            </summary>
        </member>
        <member name="M:Glimpse.Core.SerializationConverter.GlimpseRequestConverter.Convert(Glimpse.Core.Framework.GlimpseRequest)">
            <summary>
            Converts the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns>An object suitable for serialization.</returns>
        </member>
        <member name="T:Glimpse.Core.SerializationConverter.MethodInfoConverter">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> implementation responsible converting <see cref="T:System.Reflection.MethodInfo"/> representation's into a simpler format.
            </summary>
        </member>
        <member name="M:Glimpse.Core.SerializationConverter.MethodInfoConverter.Convert(System.Reflection.MethodInfo)">
            <summary>
            Converts the specified method info.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns>The method name, without namespace identifiers, with trailing parenthesis.</returns>
        </member>
        <member name="T:Glimpse.Core.SerializationConverter.TabResultConverter">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> implementation responsible converting <see cref="T:Glimpse.Core.Framework.TabResult"/> representation's into a format suitable for serialization.
            </summary>
        </member>
        <member name="M:Glimpse.Core.SerializationConverter.TabResultConverter.Convert(Glimpse.Core.Framework.TabResult)">
            <summary>
            Converts the specified result.
            </summary>
            <param name="result">The result.</param>
            <returns>An object suitable for serialization.</returns>
        </member>
        <member name="T:Glimpse.Core.SerializationConverter.CSharpTypeConverter">
            <summary>
            The <see cref="T:Glimpse.Core.Extensibility.ISerializationConverter"/> implementation responsible converting <see cref="T:System.Type"/> representation's into more recognizable C# syntax.
            </summary>
            <example>
            With <see cref="T:Glimpse.Core.SerializationConverter.CSharpTypeConverter"/>, <c>System.Int32</c> is converted to <c>int</c> and <c>System.Collections.Generic.IDictionary`2[System.Double, System.String[]]</c> to <c>IDictionary&lt;double, string[]&gt;</c>.
            </example>
            <remarks>
            Users of other languages could disable <see cref="T:Glimpse.Core.SerializationConverter.CSharpTypeConverter"/> and create a <c>SerializationConverter&lt;Type&gt;</c> implementation for their language.
            </remarks>
        </member>
        <member name="M:Glimpse.Core.SerializationConverter.CSharpTypeConverter.Convert(System.Type)">
            <summary>
            Converts the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>An string of the C# syntax which would be used to represent <paramref name="type"/>.</returns>
        </member>
        <member name="T:Glimpse.Core.Tab.Timeline">
            <summary>
            Timeline tab
            </summary>
        </member>
        <member name="M:Glimpse.Core.Tab.Timeline.Setup(Glimpse.Core.Extensibility.ITabSetupContext)">
            <summary>
            Setups the targeted tab using the specified context.
            </summary>
            <param name="context">The context which should be used.</param>
        </member>
        <member name="M:Glimpse.Core.Tab.Timeline.GetData(Glimpse.Core.Extensibility.ITabContext)">
            <summary>
            Gets the data that should be shown in the UI.
            </summary>
            <param name="context">The context.</param>
            <returns>Object that will be shown.</returns>
        </member>
        <member name="P:Glimpse.Core.Tab.Timeline.Name">
            <summary>
            Gets the name that will show in the tab.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Glimpse.Core.Tab.Timeline.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key. Only valid JavaScript identifiers should be used for future compatibility.</value>
        </member>
        <member name="P:Glimpse.Core.Tab.Timeline.DocumentationUri">
            <summary>
            Gets the documentation URI.
            </summary>
            <value>The documentation URI.</value>
        </member>
        <member name="T:Glimpse.Core.Tab.Glimpse">
            <summary>
            Glimpse tab
            </summary>
        </member>
        <member name="F:Glimpse.Core.Tab.Glimpse.TabKey">
            <summary>
            The tab key that is used during storage.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Tab.Glimpse.GetData(Glimpse.Core.Extensibility.ITabContext)">
            <summary>
            Gets the data that should be shown in the UI.
            </summary>
            <param name="context">The context.</param>
            <returns>Object that will be shown.</returns>
        </member>
        <member name="M:Glimpse.Core.Tab.Glimpse.Setup(Glimpse.Core.Extensibility.ITabSetupContext)">
            <summary>
            Setups the targeted tab using the specified context.
            </summary>
            <param name="context">The context which should be used.</param>
        </member>
        <member name="P:Glimpse.Core.Tab.Glimpse.Name">
            <summary>
            Gets the name that will show in the tab.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Glimpse.Core.Tab.Glimpse.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key. Only valid JavaScript identifiers should be used for future compatibility.</value>
        </member>
        <member name="T:Glimpse.Core.Tab.Trace">
            <summary>
            Trace tab
            </summary>
        </member>
        <member name="F:Glimpse.Core.Tab.Trace.TabKey">
            <summary>
            The tab key that is used during storage.
            </summary>
        </member>
        <member name="M:Glimpse.Core.Tab.Trace.GetLayout">
            <summary>
            Gets the layout which controls the layout.
            </summary>
            <returns>Object that dictates the layout.</returns>
        </member>
        <member name="M:Glimpse.Core.Tab.Trace.GetData(Glimpse.Core.Extensibility.ITabContext)">
            <summary>
            Gets the data that should be shown in the UI.
            </summary>
            <param name="context">The context.</param>
            <returns>Object that will be shown.</returns>
        </member>
        <member name="M:Glimpse.Core.Tab.Trace.Setup(Glimpse.Core.Extensibility.ITabSetupContext)">
            <summary>
            Setups the targeted tab using the specified context.
            </summary>
            <param name="context">The context which should be used.</param>
        </member>
        <member name="P:Glimpse.Core.Tab.Trace.Name">
            <summary>
            Gets the name that will show in the tab.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Glimpse.Core.Tab.Trace.DocumentationUri">
            <summary>
            Gets the documentation URI.
            </summary>
            <value>The documentation URI.</value>
        </member>
        <member name="P:Glimpse.Core.Tab.Trace.ExecuteOn">
            <summary>
            Gets when the <see cref="M:Glimpse.Core.Extensibility.ITab.GetData(Glimpse.Core.Extensibility.ITabContext)"/> method should run.
            </summary>
            <value>The execute on.</value>
        </member>
        <member name="P:Glimpse.Core.Tab.Trace.RequestContextType">
            <summary>
            Gets the type of the request context that the Tab relies on. If
            returns null, the tab can be used in any context.
            </summary>
            <value>The type of the request context.</value>
        </member>
        <member name="P:Glimpse.Core.Tab.Trace.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key. Only valid JavaScript identifiers should be used for future compatibility.</value>
        </member>
        <member name="T:Glimpse.Core.TraceListener">
            <summary>
            Listener that Glimpse can use to tap into triggered events.
            </summary>
        </member>
        <member name="M:Glimpse.Core.TraceListener.#ctor">
            <summary>
            These constructors used by .NET when TraceListener is set via web.config
            </summary>
        </member>
        <member name="M:Glimpse.Core.TraceListener.#ctor(System.String)">
            <summary>
            This constructor is needed for users who configure web.config with <add name="myListener" type="Glimpse.AspNet.TraceListener" initializeData="something"/>
            </summary>
            <param name="initializeData">Initialize data string</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.#ctor(Glimpse.Core.Extensibility.IMessageBroker,System.Func{Glimpse.Core.Extensibility.IExecutionTimer})">
            <summary>
            Initializes a new instance of the <see cref="T:Glimpse.Core.TraceListener"/> class.
            </summary>
            <param name="messageBroker">The message broker.</param>
            <param name="timerStrategy">The timer strategy.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.Write(System.Object)">
            <summary>
            Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
            </summary>
            <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.Write(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
            </summary>
            <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.Write(System.String,System.String)">
            <summary>
            Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.WriteLine(System.Object)">
            <summary>
            Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class, followed by a line terminator.
            </summary>
            <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.WriteLine(System.Object,System.String)">
            <summary>
            Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class, followed by a line terminator.
            </summary>
            <param name="o">An <see cref="T:System.Object" /> whose fully qualified class name you want to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.WriteLine(System.String,System.String)">
            <summary>
            Writes a category name and a message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class, followed by a line terminator.
            </summary>
            <param name="message">A message to write.</param>
            <param name="category">A category name used to organize the output.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.Fail(System.String)">
            <summary>
            Emits an error message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
            </summary>
            <param name="message">A message to emit.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.Fail(System.String,System.String)">
            <summary>
            Emits an error message and a detailed error message to the listener you create when you implement the <see cref="T:System.Diagnostics.TraceListener" /> class.
            </summary>
            <param name="message">A message to emit.</param>
            <param name="detailMessage">A detailed message to emit.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
            Writes trace information, a data object and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data to emit.</param> 
        </member>
        <member name="M:Glimpse.Core.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">An array of objects to emit as data.</param> 
        </member>
        <member name="M:Glimpse.Core.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <summary>
            Traces the event.
            </summary>
            <param name="eventCache">The event cache.</param>
            <param name="source">The source.</param>
            <param name="eventType">Type of the event.</param>
            <param name="id">The id.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Glimpse.Core.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Writes trace information, a formatted array of objects and event information to the listener specific output.
            </summary>
            <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
            <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
            <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
            <param name="args">An object array containing zero or more objects to format.</param> 
        </member>
    </members>
</doc>
